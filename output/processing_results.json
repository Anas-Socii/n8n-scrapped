[
  {
    "input_workflow_name": "__Calendar_Agent.json",
    "output_workflow_name": "🤖Calendar Agent",
    "output_workflow_file_path": "analyzed_workflows/Calendar_Agent/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Calendar_Agent/README.md",
    "summary": "An AI-powered agent to manage Google Calendar events (create, get, delete, update) based on natural language queries.",
    "inputs": ["n8n-nodes-base.executeWorkflowTrigger"],
    "nodes_used": [
      "n8n-nodes-base.executeWorkflowTrigger",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "n8n-nodes-base.googleCalendarTool",
      "n8n-nodes-base.set"
    ],
    "outputs": ["JSON response with agent's output or error message"],
    "processed_at": "05/06/2025 16:49"
  },
  {
    "input_workflow_name": "__Contact_Agent.json",
    "output_workflow_name": "🤖Contact Agent",
    "output_workflow_file_path": "analyzed_workflows/Contact_Agent/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Contact_Agent/README.md",
    "summary": "An AI-powered agent for managing contact records in Airtable—searching, adding, and updating contacts through natural language queries.",
    "inputs": ["n8n-nodes-base.executeWorkflowTrigger"],
    "nodes_used": [
      "n8n-nodes-base.executeWorkflowTrigger",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "n8n-nodes-base.airtableTool",
      "n8n-nodes-base.set"
    ],
    "outputs": ["JSON response with agent's output or error message"],
    "processed_at": "05/06/2025 17:00"
  },
  {
    "input_workflow_name": "[CENSORED]_(G)_LineChatBot_+_Google_Sheets_(as_a_memory).json",
    "output_workflow_name": "(G) LineChatBot + Google Sheets (as a memory)",
    "output_workflow_file_path": "analyzed_workflows/LineChatBot_Google_Sheets_as_a_memory/workflow.json",
    "output_readme_file_path": "analyzed_workflows/LineChatBot_Google_Sheets_as_a_memory/README.md",
    "summary": "A chatbot workflow that integrates LINE messaging with Google Sheets, using an AI agent to provide interactive, memory-enabled conversations.",
    "inputs": ["n8n-nodes-base.webhook"],
    "nodes_used": [
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.set",
      "n8n-nodes-base.googleSheets",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.function"
    ],
    "outputs": ["LINE reply message", "Google Sheets memory update"],
    "processed_at": "05/06/2025 17:09"
  },
  {
    "input_workflow_name": "_Easily_Compare_LLMs_Using_OpenAI_and_Google_Sheets.json",
    "output_workflow_name": "Easily Compare LLMs Using OpenAI and Google Sheets",
    "output_workflow_file_path": "analyzed_workflows/Easily_Compare_LLMs_Using_OpenAI_and_Google_Sheets/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Easily_Compare_LLMs_Using_OpenAI_and_Google_Sheets/README.md",
    "summary": "A workflow for comparing the outputs of multiple large language models (LLMs) such as OpenAI's GPT and OpenRouter models, using Google Sheets for structured evaluation and result logging.",
    "inputs": ["@n8n/n8n-nodes-langchain.chatTrigger"],
    "nodes_used": [
      "@n8n/n8n-nodes-langchain.chatTrigger",
      "n8n-nodes-base.set",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.splitInBatches",
      "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "@n8n/n8n-nodes-langchain.memoryManager",
      "n8n-nodes-base.summarize",
      "n8n-nodes-base.aggregate",
      "n8n-nodes-base.googleSheets"
    ],
    "outputs": ["Aggregated LLM responses", "Google Sheets results log"],
    "processed_at": "05/06/2025 17:21"
  },
  {
    "input_workflow_name": "_Generate_AI-Ready_llms.txt_Files_from_Screaming_Frog_Website_Crawls.json",
    "output_workflow_name": "Generate AI-Ready llms.txt Files from Screaming Frog Website Crawls",
    "output_workflow_file_path": "analyzed_workflows/Generate_AI-Ready_llms_txt_Files_from_Screaming_Frog_Website_Crawls/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Generate_AI-Ready_llms_txt_Files_from_Screaming_Frog_Website_Crawls/README.md",
    "summary": "Automates the creation of llms.txt files from Screaming Frog website crawl exports, filtering and formatting content for LLM ingestion or discovery.",
    "inputs": ["Form Node (CSV upload)", "Screaming Frog Export"],
    "nodes_used": [
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.filter",
      "@n8n/n8n-nodes-langchain.textClassifier",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "n8n-nodes-base.noOp",
      "n8n-nodes-base.summarize",
      "n8n-nodes-base.convertToFile"
    ],
    "outputs": ["llms.txt file (download or upload)"],
    "processed_at": "05/06/2025 17:25"
  },
  {
    "input_workflow_name": "__Content_Creator_Agent.json",
    "output_workflow_name": "🤖Content Creator Agent",
    "output_workflow_file_path": "analyzed_workflows/Content_Creator_Agent/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Content_Creator_Agent/README.md",
    "summary": "AI-powered agent that generates high-quality, SEO-optimized blog content using web search and advanced language models. Integrates external search (Tavily), Anthropic and agent nodes for robust, fact-checked, and well-structured blog writing.",
    "inputs": ["Execute Workflow Trigger", "User Query (blog topic)"],
    "nodes_used": [
      "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "@n8n/n8n-nodes-langchain.agent",
      "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "n8n-nodes-base.set",
      "n8n-nodes-base.executeWorkflowTrigger"
    ],
    "outputs": ["HTML blog content response"],
    "processed_at": "05/06/2025 17:26"
  },
  {
    "input_workflow_name": "__Email_Agent.json",
    "output_workflow_name": "🤖Email Agent",
    "output_workflow_file_path": "analyzed_workflows/Email_Agent/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Email_Agent/README.md",
    "summary": "AI-powered agent for professional email management and automation. Integrates OpenAI, n8n agent, and Gmail nodes to automate sending, drafting, labeling, replying, and managing emails with robust error handling and workflow chaining.",
    "inputs": ["Execute Workflow Trigger", "User Query (email task)"],
    "nodes_used": [
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.agent",
      "n8n-nodes-base.gmailTool",
      "n8n-nodes-base.set",
      "n8n-nodes-base.executeWorkflowTrigger"
    ],
    "outputs": ["Email sent/drafted/labeled/etc. or error message"],
    "processed_at": "05/06/2025 17:32"
  },
  {
    "input_workflow_name": "_piepdrive-test.json",
    "output_workflow_name": "piepdrive-test",
    "output_workflow_file_path": "analyzed_workflows/piepdrive-test/workflow.json",
    "output_readme_file_path": "analyzed_workflows/piepdrive-test/README.md",
    "summary": "Enriches Pipedrive organization data with AI-generated notes when a new organization is created. Scrapes the organization's website, summarizes key info with OpenAI GPT-4o, and posts results to Pipedrive and Slack.",
    "inputs": [
      "Pipedrive Trigger (Organization Created)",
      "Organization Website URL"
    ],
    "nodes_used": [
      "n8n-nodes-base.pipedriveTrigger",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.pipedrive",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.markdown",
      "n8n-nodes-base.code",
      "n8n-nodes-base.slack",
      "@n8n/n8n-nodes-langchain.openAi"
    ],
    "outputs": ["Pipedrive Note", "Slack Notification"],
    "processed_at": "05/06/2025 17:33"
  },
  {
    "input_workflow_name": "⚡AI-Powered YouTube Video Summarization & Analysis.json",
    "output_workflow_name": "⚡AI-Powered YouTube Video Summarization & Analysis",
    "output_workflow_file_path": "analyzed_workflows/AI-Powered_YouTube_Video_Summarization_Analysis/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI-Powered_YouTube_Video_Summarization_Analysis/README.md",
    "summary": "Automates extraction, summarization, and analysis of YouTube video content. Uses webhooks, transcript extraction, OpenAI GPT-4o, and messaging integrations to deliver concise video summaries and insights via webhook and Telegram.",
    "inputs": ["Webhook (YouTube URL)"],
    "nodes_used": [
      "n8n-nodes-base.webhook",
      "n8n-nodes-base.set",
      "n8n-nodes-base.code",
      "n8n-nodes-base.youTube",
      "n8n-nodes-youtube-transcription.youtubeTranscripter",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.summarize",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.chainLlm",
      "n8n-nodes-base.set",
      "n8n-nodes-base.respondToWebhook",
      "n8n-nodes-base.telegram"
    ],
    "outputs": [
      "Webhook Response (summary, topics, title, description, id, youtubeUrl)",
      "Telegram Message"
    ],
    "processed_at": "05/06/2025 17:34"
  },
  {
    "input_workflow_name": "⚡AI-Powered YouTube Video Summarization & Analysis.json",
    "output_workflow_name": "AI_Powered_YouTube_Summarization_Analysis",
    "output_workflow_file_path": "analyzed_workflows/AI_Powered_YouTube_Summarization_Analysis/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI_Powered_YouTube_Summarization_Analysis/README.md",
    "summary": "Extracts, summarizes, and analyzes YouTube video transcripts using AI, delivering results via Telegram and webhook.",
    "inputs": ["Webhook"],
    "nodes_used": [
      "Webhook",
      "Get YouTube URL",
      "YouTube Video ID",
      "Get YouTube Video",
      "YouTube Transcript",
      "Split Out",
      "Concatenate",
      "gpt-4o-mini",
      "Summarize & Analyze Transcript",
      "Response Object",
      "Respond to Webhook",
      "Telegram"
    ],
    "outputs": ["Telegram message", "Webhook response"],
    "processed_at": "05/06/2025 18:00"
  },
  {
    "input_workflow_name": "✨ Vision-Based AI Agent Scraper - with Google Sheets, ScrapingBee, and Gemini.json",
    "output_workflow_name": "Vision_Based_AI_Agent_Scraper_GSheets_ScrapingBee_Gemini",
    "output_workflow_file_path": "analyzed_workflows/Vision_Based_AI_Agent_Scraper_GSheets_ScrapingBee_Gemini/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Vision_Based_AI_Agent_Scraper_GSheets_ScrapingBee_Gemini/README.md",
    "summary": "Scrapes structured product data from web pages using a vision-based AI agent, integrating Google Sheets, ScrapingBee, and Gemini for robust extraction and output.",
    "inputs": [
      "Manual Trigger (Test workflow)",
      "Google Sheets - List of URLs"
    ],
    "nodes_used": [
      "Manual Trigger",
      "Google Sheets - Get list of URLs",
      "Set fields",
      "ScrapingBee - Get page screenshot",
      "ScrapingBee- Get page HTML",
      "Google Gemini Chat Model",
      "Structured Output Parser",
      "Split Out",
      "HTML-based Scraping Tool",
      "Google Sheets - Create Rows",
      "Sticky Notes"
    ],
    "outputs": [
      "Structured product data in Google Sheets",
      "Screenshots and extracted information for each URL"
    ],
    "processed_at": "05/06/2025 18:10"
  },
  {
    "input_workflow_name": "🎨 Interactive Image Editor with FLUX.1 Fill Tool for Inpainting.json",
    "output_workflow_name": "Interactive_Image_Editor_FLUX1_Fill_Tool_Inpainting",
    "output_workflow_file_path": "analyzed_workflows/Interactive_Image_Editor_FLUX1_Fill_Tool_Inpainting/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Interactive_Image_Editor_FLUX1_Fill_Tool_Inpainting/README.md",
    "summary": "Enables interactive image editing and inpainting via a web-based editor and the FLUX.1 Fill Tool API, handling user uploads, masks, prompts, and real-time delivery of edited images.",
    "inputs": [
      "Webhook (HTTP endpoint /flux-fill)",
      "Editor page loaded in browser"
    ],
    "nodes_used": [
      "Webhook",
      "Mockups",
      "Merge",
      "Editor page (HTML)",
      "NO OP",
      "FLUX Fill (HTTP Request)",
      "Wait 3 sec",
      "Check FLUX status (HTTP Request)",
      "Is Ready? (If)",
      "Get Fill Image (HTTP Request)",
      "Show the image to user (Respond to Webhook)",
      "Sticky Notes"
    ],
    "outputs": [
      "Edited/inpainted image returned to the user",
      "HTML editor page with before/after comparison"
    ],
    "processed_at": "05/06/2025 18:13"
  },
  {
    "input_workflow_name": "🐋DeepSeek V3 Chat & R1 Reasoning Quick Start.json",
    "output_workflow_name": "DeepSeek_V3_Chat_R1_Reasoning_Quick_Start",
    "output_workflow_file_path": "analyzed_workflows/DeepSeek_V3_Chat_R1_Reasoning_Quick_Start/workflow.json",
    "output_readme_file_path": "analyzed_workflows/DeepSeek_V3_Chat_R1_Reasoning_Quick_Start/README.md",
    "summary": "Conversational AI and reasoning starter using DeepSeek V3 and R1 models, supporting chat triggers, agent orchestration, memory, and multiple LLM integrations.",
    "inputs": [
      "Chat message received (via @n8n/n8n-nodes-langchain.chatTrigger)"
    ],
    "nodes_used": [
      "When chat message received",
      "AI Agent",
      "DeepSeek",
      "Window Buffer Memory",
      "Basic LLM Chain2",
      "Ollama DeepSeek",
      "Sticky Notes"
    ],
    "outputs": ["AI-generated response to the chat input"],
    "processed_at": "05/06/2025 18:16"
  },
  {
    "input_workflow_name": "🐋🤖 DeepSeek AI Agent + Telegram + LONG TERM Memory 🧠.json",
    "output_workflow_name": "DeepSeek_AI_Agent_Telegram_Long_Term_Memory",
    "output_workflow_file_path": "analyzed_workflows/DeepSeek_AI_Agent_Telegram_Long_Term_Memory/workflow.json",
    "output_readme_file_path": "analyzed_workflows/DeepSeek_AI_Agent_Telegram_Long_Term_Memory/README.md",
    "summary": "Telegram-integrated DeepSeek AI agent with advanced reasoning and long-term memory. Validates users, routes messages, and maintains persistent context for personalized AI chat.",
    "inputs": [
      "Telegram webhook (via Listen for Telegram Events node)",
      "Text, audio, or image messages"
    ],
    "nodes_used": [
      "Listen for Telegram Events",
      "Validation / Check User & Chat ID",
      "Message Router",
      "AI Agent",
      "DeepSeek-V3 Chat / DeepSeek-R1 Reasoning",
      "Window Buffer Memory",
      "Save/Retrieve Long Term Memories",
      "Merge",
      "Error message / Telegram Response",
      "Sticky Notes"
    ],
    "outputs": [
      "AI-generated response on Telegram",
      "Error message if validation fails or unsupported input"
    ],
    "processed_at": "05/06/2025 18:16"
  },
  {
    "input_workflow_name": "📚 Auto-generate documentation for n8n workflows with GPT and Docsify.json",
    "output_workflow_name": "Auto_generate_documentation_with_GPT_and_Docsify",
    "output_workflow_file_path": "analyzed_workflows/Auto_generate_documentation_with_GPT_and_Docsify/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Auto_generate_documentation_with_GPT_and_Docsify/README.md",
    "summary": "Automates creation and serving of documentation for all n8n workflows using Docsify and GPT.",
    "inputs": ["Manual or Scheduled Trigger (implied)", "Workflow Data"],
    "nodes_used": [
      "Set (CONFIG)",
      "Convert to File",
      "If (HasFile?)",
      "Extract from File",
      "HTML (Main Page)",
      "HTML (Instance overview)",
      "Sort",
      "Switch (doc action)",
      "Other workflow utility nodes"
    ],
    "outputs": ["Docsify HTML documentation", "Markdown/HTML files"],
    "processed_at": "05/06/2025 18:36"
  },
  {
    "input_workflow_name": "🔍 Perplexity Research to HTML_ AI-Powered Content Creation.json",
    "output_workflow_name": "Perplexity_Research_to_HTML_AI_Powered_Content_Creation",
    "output_workflow_file_path": "analyzed_workflows/Perplexity_Research_to_HTML_AI_Powered_Content_Creation/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Perplexity_Research_to_HTML_AI_Powered_Content_Creation/README.md",
    "summary": "Uses Perplexity AI and GPT-4o-mini to research a topic, generate a structured article, and convert it to HTML for publishing.",
    "inputs": ["Webhook or Manual Trigger (topic input)"],
    "nodes_used": [
      "ai_tool (gpt-4o-mini-2024-07-18)",
      "Perplexity Researcher",
      "Structured Output Parser",
      "If/Branch Nodes",
      "Webhook/Manual Trigger",
      "Telegram Node (optional)"
    ],
    "outputs": ["JSON with title and HTML content"],
    "processed_at": "05/06/2025 18:40"
  },
  {
    "input_workflow_name": "🔐🦙🤖 Private & Local Ollama Self-Hosted AI Assistant.json",
    "output_workflow_name": "Private_Local_Ollama_Self_Hosted_AI_Assistant",
    "output_workflow_file_path": "analyzed_workflows/Private_Local_Ollama_Self_Hosted_AI_Assistant/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Private_Local_Ollama_Self_Hosted_AI_Assistant/README.md",
    "summary": "Creates a private chat assistant using the local Ollama Llama 3.2 model, triggered by chat messages and returning structured JSON responses.",
    "inputs": ["Chat Trigger (message received)", "User Prompt"],
    "nodes_used": [
      "Chat Trigger",
      "Basic LLM Chain",
      "Ollama Model",
      "Set (JSON to Object)",
      "Set (Structured Response)",
      "Set (Error Response)",
      "Sticky Notes"
    ],
    "outputs": ["Structured JSON with prompt and response"],
    "processed_at": "05/06/2025 18:40"
  },
  {
    "input_workflow_name": "🔥📈🤖 AI Agent for n8n Creators Leaderboard - Find Popular Workflows.json",
    "output_workflow_name": "AI_Agent_for_n8n_Creators_Leaderboard_Find_Popular_Workflows",
    "output_workflow_file_path": "analyzed_workflows/AI_Agent_for_n8n_Creators_Leaderboard_Find_Popular_Workflows/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI_Agent_for_n8n_Creators_Leaderboard_Find_Popular_Workflows/README.md",
    "summary": "Analyzes public n8n community leaderboard data to identify top creators and their most popular workflows using HTTP requests, parsing, filtering, and aggregation.",
    "inputs": ["Manual or scheduled trigger"],
    "nodes_used": [
      "Set (Global Variables)",
      "HTTP Request (stats_aggregate_creators, stats_aggregate_workflows)",
      "Set (Parse Workflow Data/Creators Data)",
      "Limit (Take Top 25 Creators)",
      "Aggregate",
      "Filter (By Creator Username)",
      "gpt-4o-mini"
    ],
    "outputs": ["Aggregated and filtered data on top creators and workflows"],
    "processed_at": "05/06/2025 18:45"
  },
  {
    "input_workflow_name": "🤖 Telegram Messaging Agent for Text_Audio_Images.json",
    "output_workflow_name": "Telegram_Messaging_Agent_for_Text_Audio_Images",
    "output_workflow_file_path": "analyzed_workflows/Telegram_Messaging_Agent_for_Text_Audio_Images/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Telegram_Messaging_Agent_for_Text_Audio_Images/README.md",
    "summary": "Enables a Telegram bot to receive, process, and respond to text, audio, and image messages. Handles user verification, webhooks, and uses OpenAI for transcription and image analysis.",
    "inputs": ["Telegram webhook (message received)"],
    "nodes_used": [
      "Webhook (Listen for Telegram Events)",
      "If (Check User & Chat ID)",
      "Telegram (Error message)",
      "HTTP Request (Set Webhook Test URL, Get Telegram Webhook Info)",
      "Telegram (Get Audio File, Get Image)",
      "OpenAI (Transcribe Recording, Analyze Image, gpt-4o-mini)",
      "Set (Image Schema)",
      "Sticky Notes"
    ],
    "outputs": [
      "Telegram message responses (text, transcribed audio, analyzed images)",
      "Error messages for invalid or unauthorized users"
    ],
    "processed_at": "05/06/2025 18:51"
  },
  {
    "input_workflow_name": "0KZs18Ti2KXKoLIr_✨🩷Automated_Social_Media_Content_Publishing_Factory_+_System_Prompt_Composition.json",
    "output_workflow_name": "Automated_Social_Media_Content_Publishing_Factory",
    "output_workflow_file_path": "analyzed_workflows/Automated_Social_Media_Content_Publishing_Factory/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Automated_Social_Media_Content_Publishing_Factory/README.md",
    "summary": "Automates the creation and publishing of social media content (Twitter/X, Instagram, etc.) using LLMs and dynamic system prompts. Supports multi-channel routing and memory for enhanced content generation.",
    "inputs": ["Chat message received", "Executed by another workflow"],
    "nodes_used": [
      "Chat Trigger",
      "Sticky Notes",
      "ToolWorkflow (X-Twitter, Instagram)",
      "Window Buffer Memory"
    ],
    "outputs": [
      "Published posts on Twitter/X, Instagram, and other platforms",
      "Logs or responses summarizing publishing actions"
    ],
    "processed_at": "05/06/2025 21:32"
  },
  {
    "input_workflow_name": "0wfomsVO0TQtQkwU_Complete_Guide_to_Setting_Up_and_Generating_TOTP_Codes_in_n8n_🔐.json",
    "output_workflow_name": "Complete_Guide_TOTP_Codes_n8n",
    "output_workflow_file_path": "analyzed_workflows/Complete_Guide_TOTP_Codes_n8n/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Complete_Guide_TOTP_Codes_n8n/README.md",
    "summary": "Demonstrates how to generate Time-based One-Time Password (TOTP) codes in n8n for secure authentication workflows.",
    "inputs": ["Manual Trigger"],
    "nodes_used": ["Manual Trigger", "TOTP Node"],
    "outputs": [
      "Generated TOTP code (for use in authentication or as output data)"
    ],
    "processed_at": "05/06/2025 21:32"
  },
  {
    "input_workflow_name": "🤖🧑_💻 AI Agent for Top n8n Creators Leaderboard Reporting.json",
    "output_workflow_name": "AI_Agent_Top_n8n_Creators_Leaderboard_Reporting",
    "output_workflow_file_path": "analyzed_workflows/AI_Agent_Top_n8n_Creators_Leaderboard_Reporting/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI_Agent_Top_n8n_Creators_Leaderboard_Reporting/README.md",
    "summary": "Aggregates and reports on the top n8n creators and their most popular workflows using public leaderboard data and AI-powered analytics.",
    "inputs": ["Manual or scheduled trigger", "Execution by another workflow"],
    "nodes_used": [
      "HTTP Request Nodes",
      "Set (Global Variables)",
      "Parse/Set Nodes",
      "Aggregate Node",
      "LLM Node (gpt-4o-mini)",
      "Workflow Tool Node",
      "ConvertToFile"
    ],
    "outputs": ["Leaderboard reports", "Analytics summaries", "File exports"],
    "processed_at": "05/06/2025 21:32"
  },
  {
    "input_workflow_name": "🤖🧠 AI Agent Chatbot + LONG TERM Memory + Note Storage + Telegram.json",
    "output_workflow_name": "AI_Agent_Chatbot_Long_Term_Memory_Telegram",
    "output_workflow_file_path": "analyzed_workflows/AI_Agent_Chatbot_Long_Term_Memory_Telegram/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI_Agent_Chatbot_Long_Term_Memory_Telegram/README.md",
    "summary": "AI-powered chatbot with long-term memory, note storage in Google Docs, and Telegram integration for persistent, context-aware conversations.",
    "inputs": ["Chat message received"],
    "nodes_used": [
      "Chat Trigger",
      "Google Docs Tool",
      "LLM Node (gpt-4o-mini)",
      "Telegram Node",
      "Sticky Notes"
    ],
    "outputs": [
      "Chat responses",
      "Persistent memory entries",
      "Telegram messages"
    ],
    "processed_at": "05/06/2025 21:32"
  },
  {
    "input_workflow_name": "1_Add_a_event_to_Calender.json",
    "output_workflow_name": "Add_Event_to_Calendar",
    "output_workflow_file_path": "analyzed_workflows/Add_Event_to_Calendar/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Add_Event_to_Calendar/README.md",
    "summary": "Adds a new event to a specified Google Calendar when manually triggered.",
    "inputs": ["Manual Trigger"],
    "nodes_used": ["Manual Trigger", "Google Calendar"],
    "outputs": ["New event created in the designated Google Calendar"],
    "processed_at": "05/06/2025 21:39"
  },
  {
    "input_workflow_name": "1_Add_text_to_an_image_downloaded_from_the_internet.json",
    "output_workflow_name": "Add_Text_to_Image_from_Internet",
    "output_workflow_file_path": "analyzed_workflows/Add_Text_to_Image_from_Internet/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Add_Text_to_Image_from_Internet/README.md",
    "summary": "Downloads an image from a URL and overlays custom text onto it when manually triggered.",
    "inputs": ["Manual Trigger"],
    "nodes_used": ["Manual Trigger", "HTTP Request", "Edit Image"],
    "outputs": ["Image file with overlaid text"],
    "processed_at": "05/06/2025 21:39"
  },
  {
    "input_workflow_name": "1_Create_Nextcloud_Deck_card_from_email.json",
    "output_workflow_name": "Create_Nextcloud_Deck_Card_from_Email",
    "output_workflow_file_path": "analyzed_workflows/Create_Nextcloud_Deck_Card_from_Email/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Create_Nextcloud_Deck_Card_from_Email/README.md",
    "summary": "Reads emails via IMAP, processes the content, and creates a new card in a Nextcloud Deck board using the email’s subject and body.",
    "inputs": ["IMAP Email"],
    "nodes_used": ["IMAP Email", "Function", "HTTP Request"],
    "outputs": [
      "New card created in the specified Nextcloud Deck board and stack"
    ],
    "processed_at": "05/06/2025 21:39"
  },
  {
    "input_workflow_name": "1_Create_entry_in_Mailchimp_from_Airtable.json",
    "output_workflow_name": "Create_Entry_in_Mailchimp_from_Airtable",
    "output_workflow_file_path": "analyzed_workflows/Create_Entry_in_Mailchimp_from_Airtable/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Create_Entry_in_Mailchimp_from_Airtable/README.md",
    "summary": "Syncs user records from an Airtable table to a Mailchimp list on a scheduled basis.",
    "inputs": ["Cron Trigger"],
    "nodes_used": ["Cron", "Airtable", "Mailchimp"],
    "outputs": [
      "New or updated subscriber entries in the chosen Mailchimp list"
    ],
    "processed_at": "05/06/2025 21:39"
  },
  {
    "input_workflow_name": "1_Daily_Journal_Reminder.json",
    "output_workflow_name": "Daily_Journal_Reminder",
    "output_workflow_file_path": "analyzed_workflows/Daily_Journal_Reminder/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Daily_Journal_Reminder/README.md",
    "summary": "Sends a daily Telegram reminder each morning, prompting the user to log their journal entry for the previous day.",
    "inputs": ["Cron Trigger"],
    "nodes_used": ["Cron", "Function Item", "Telegram"],
    "outputs": ["Telegram message reminder sent to the user"],
    "processed_at": "05/06/2025 21:50"
  },
  {
    "input_workflow_name": "1_Dialpad_to_Syncro.json",
    "output_workflow_name": "Dialpad_to_Syncro",
    "output_workflow_file_path": "analyzed_workflows/Dialpad_to_Syncro/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Dialpad_to_Syncro/README.md",
    "summary": "Integrates Dialpad call events with Syncro ticketing and Google Sheets for automated customer lookup, ticket creation, and logging.",
    "inputs": ["Webhook"],
    "nodes_used": [
      "Webhook",
      "GetCustomer (HTTP Request)",
      "GetTicket (HTTP Request)",
      "IFMoreThanOne (If)",
      "CreateTicket (HTTP Request)",
      "UpdateTicket (HTTP Request)",
      "ForGoogle (Set)",
      "Google Sheets"
    ],
    "outputs": [
      "Tickets created or updated in Syncro",
      "Call and ticket IDs logged in Google Sheets"
    ],
    "processed_at": "05/06/2025 21:50"
  },
  {
    "input_workflow_name": "1_Google_Cal_to_Zoom_meeting.json",
    "output_workflow_name": "Google_Calendar_to_Zoom_Meeting",
    "output_workflow_file_path": "analyzed_workflows/Google_Calendar_to_Zoom_Meeting/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google_Calendar_to_Zoom_Meeting/README.md",
    "summary": "Automatically creates Zoom meetings for upcoming Google Calendar events, filtering out unwanted types, and scheduling them via a daily cron job or manual execution.",
    "inputs": ["Cron Trigger", "Manual Trigger"],
    "nodes_used": [
      "Cron Once a Day",
      "Manual Trigger",
      "Date & Time",
      "Google Calendar",
      "IF Zoom meeting",
      "Zoom"
    ],
    "outputs": ["Zoom meetings created for filtered Google Calendar events"],
    "processed_at": "05/06/2025 21:50"
  },
  {
    "input_workflow_name": "XML Conversion",
    "output_workflow_name": "XML Conversion",
    "output_workflow_file_path": "analyzed_workflows/XML_Conversion/workflow.json",
    "output_readme_file_path": "analyzed_workflows/XML_Conversion/README.md",
    "summary": "Converts XML data to JSON using a manual trigger, Set node, and XML node. Useful for data transformation and integration.",
    "inputs": ["Manual Trigger"],
    "nodes_used": ["Manual Trigger", "Set", "XML"],
    "outputs": ["JSON data converted from XML"],
    "processed_at": "2025-06-08T18:31:54+05:00"
  },
  {
    "input_workflow_name": "1_Google_Sheet_to_Mailchimp.json",
    "output_workflow_name": "Google_Sheet_to_Mailchimp",
    "output_workflow_file_path": "analyzed_workflows/Google_Sheet_to_Mailchimp/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google_Sheet_to_Mailchimp/README.md",
    "summary": "Syncs email addresses from a Google Sheet to a Mailchimp list, supporting both manual and interval-based execution.",
    "inputs": ["Manual Trigger", "Interval Trigger"],
    "nodes_used": ["Manual Trigger", "Interval", "Google Sheets", "Mailchimp"],
    "outputs": [
      "New or updated subscriber entries in the specified Mailchimp list"
    ],
    "processed_at": "05/06/2025 21:50"
  },
  {
    "input_workflow_name": "1_ImapEmail,_XmlToJson,_POST-HTTP-Request.json",
    "output_workflow_name": "IMAP_Email_XML_to_JSON_POST_HTTP_Request",
    "output_workflow_file_path": "analyzed_workflows/IMAP_Email_XML_to_JSON_POST_HTTP_Request/workflow.json",
    "output_readme_file_path": "analyzed_workflows/IMAP_Email_XML_to_JSON_POST_HTTP_Request/README.md",
    "summary": "Reads emails with attachments via IMAP, converts XML attachments to JSON, and posts the data to an API endpoint.",
    "inputs": ["IMAP Email"],
    "nodes_used": [
      "IMAP Email",
      "Move Binary Data",
      "XML",
      "Set",
      "HTTP Request"
    ],
    "outputs": [
      "HTTP POST request sent to the configured API endpoint with extracted data"
    ],
    "processed_at": "05/06/2025 21:50"
  },
  {
    "input_workflow_name": "1_My_workflow.json",
    "output_workflow_name": "Send_Certificate_Emails_in_Batches",
    "output_workflow_file_path": "analyzed_workflows/Send_Certificate_Emails_in_Batches/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Send_Certificate_Emails_in_Batches/README.md",
    "summary": "Reads a CSV file, parses it, and sends certificate emails with personalized attachments in batches.",
    "inputs": ["Manual Trigger"],
    "nodes_used": [
      "Manual Trigger",
      "Read Binary File",
      "Spreadsheet File",
      "SplitInBatches",
      "Read Binary File1",
      "Send Email"
    ],
    "outputs": [
      "Personalized emails with certificate attachments sent to each user in the CSV"
    ],
    "processed_at": "05/06/2025 21:55"
  },
  {
    "input_workflow_name": "1_TwitterWorkflow.json",
    "output_workflow_name": "TwitterWorkflow",
    "output_workflow_file_path": "analyzed_workflows/TwitterWorkflow/workflow.json",
    "output_readme_file_path": "analyzed_workflows/TwitterWorkflow/README.md",
    "summary": "Monitors Twitter for mentions of @n8n_io, filters new tweets, and posts notifications to RocketChat.",
    "inputs": ["Cron Trigger"],
    "nodes_used": ["Cron", "Twitter", "Set", "Function", "RocketChat"],
    "outputs": ["RocketChat message for each new mention"],
    "processed_at": "06/06/2025 13:12"
  },
  {
    "input_workflow_name": "1_Twitter_notifications.json",
    "output_workflow_name": "Twitter_notifications",
    "output_workflow_file_path": "analyzed_workflows/Twitter_notifications/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Twitter_notifications/README.md",
    "summary": "Checks Twitter for recent posts from n8n_io and sends notifications to Mattermost.",
    "inputs": ["Cron Trigger"],
    "nodes_used": ["Cron", "Twitter", "Set", "Function", "Mattermost"],
    "outputs": ["Mattermost message for each new tweet"],
    "processed_at": "06/06/2025 13:12"
  },
  {
    "input_workflow_name": "1_Website_check.json",
    "output_workflow_name": "Website_check",
    "output_workflow_file_path": "analyzed_workflows/Website_check/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Website_check/README.md",
    "summary": "Checks a website for a specific value and sends a Discord notification based on the result.",
    "inputs": ["Cron Trigger"],
    "nodes_used": ["Cron", "HTTP Request", "IF", "Discord", "Discord1"],
    "outputs": ["Discord notification indicating stock status"],
    "processed_at": "06/06/2025 13:12"
  },
  {
    "input_workflow_name": "1_Wordpress-to-csv.json",
    "output_workflow_name": "Wordpress_to_csv",
    "output_workflow_file_path": "analyzed_workflows/Wordpress_to_csv/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Wordpress_to_csv/README.md",
    "summary": "Exports all Wordpress posts to a CSV file.",
    "inputs": ["Manual Trigger"],
    "nodes_used": [
      "Manual Trigger",
      "Wordpress",
      "Spreadsheet File",
      "Write Binary File"
    ],
    "outputs": ["CSV file containing all Wordpress posts"],
    "processed_at": "06/06/2025 13:12"
  },
  {
    "input_workflow_name": "1_cheems.json",
    "output_workflow_name": "cheems",
    "output_workflow_file_path": "analyzed_workflows/cheems/workflow.json",
    "output_readme_file_path": "analyzed_workflows/cheems/README.md",
    "summary": "Sends themed Discord notifications on specific days and intervals.",
    "inputs": ["Cron (Wednesday)", "Cron1 (Friday)", "Cron2 (interval)"],
    "nodes_used": ["Cron", "Discord", "Cron1", "Discord1", "Cron2", "Discord2"],
    "outputs": ["Discord notifications with themed content"],
    "processed_at": "06/06/2025 13:12"
  },
  {
    "input_workflow_name": "1_workflow_1.json",
    "output_workflow_name": "Import_Spreadsheet_Data_to_PostgreSQL",
    "output_workflow_file_path": "analyzed_workflows/Import_Spreadsheet_Data_to_PostgreSQL/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Import_Spreadsheet_Data_to_PostgreSQL/README.md",
    "summary": "Reads an Excel spreadsheet, parses it, and inserts product data into a PostgreSQL database.",
    "inputs": ["Manual or automated execution"],
    "nodes_used": [
      "Read Binary File",
      "Spreadsheet File",
      "Insert Rows1 (Postgres)"
    ],
    "outputs": ["New rows in the product table in PostgreSQL"],
    "processed_at": "06/06/2025 13:12"
  },
  {
    "input_workflow_name": "1GOrjyc9mtZCMvCr_Structured_Data_Extract,_Data_Mining_with_Bright_Data_& _Google_Gemini.json",
    "output_workflow_name": "Structured_Data_Extract_Data_Mining_with_Bright_Data_and_Google_Gemini",
    "output_workflow_file_path": "analyzed_workflows/Structured_Data_Extract_Data_Mining_with_Bright_Data_and_Google_Gemini/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Structured_Data_Extract_Data_Mining_with_Bright_Data_and_Google_Gemini/README.md",
    "summary": "Extracts structured data from web pages using Bright Data Web Unlocker and analyzes it with Google Gemini AI for sentiment, topics, and trends.",
    "inputs": [
      "Manual Trigger (When clicking ‘Test workflow’)",
      "Bright Data Web Unlocker"
    ],
    "nodes_used": [
      "Manual Trigger",
      "Set URL and Bright Data Zone",
      "Perform Bright Data Web Request",
      "Markdown to Textual Data Extractor",
      "Initiate Webhook Notification",
      "Topic Extractor with structured response",
      "Trends by location and category",
      "Google Gemini Chat Model",
      "Create binary data for topics/trends",
      "Write file to disk",
      "Sticky Notes"
    ],
    "outputs": [
      "Structured topic/trend data as files",
      "Webhook notifications with extracted content",
      "AI-analyzed sentiment, topics, and trends"
    ],
    "processed_at": "08/06/2025 15:22"
  },
  {
    "input_workflow_name": "1U5Jf4NMQEw9LtxY_Capture_Website_Screenshots_with_Bright_Data_Web_Unlocker_and_Save_to_Disk.json",
    "output_workflow_name": "Capture_Website_Screenshots_with_Bright_Data_Web_Unlocker_and_Save_to_Disk",
    "output_workflow_file_path": "analyzed_workflows/Capture_Website_Screenshots_with_Bright_Data_Web_Unlocker_and_Save_to_Disk/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Capture_Website_Screenshots_with_Bright_Data_Web_Unlocker_and_Save_to_Disk/README.md",
    "summary": "Captures screenshots of specified websites using Bright Data Web Unlocker and saves them to disk.",
    "inputs": [
      "Manual Trigger (When clicking ‘Test workflow’)",
      "Bright Data Web Unlocker"
    ],
    "nodes_used": [
      "Manual Trigger",
      "Set URL, Filename and Bright Data Zone",
      "Capture a screenshot",
      "Write a file to disk",
      "Sticky Notes"
    ],
    "outputs": ["Screenshot image file saved to disk"],
    "processed_at": "08/06/2025 15:22"
  },
  {
    "input_workflow_name": "1V1gcK6vyczRqdZC_Printify_Automation_-_Update_Title_and_Description_-_AlexK1919.json",
    "output_workflow_name": "Printify_Automation_Update_Title_and_Description_AlexK1919",
    "output_workflow_file_path": "analyzed_workflows/Printify_Automation_Update_Title_and_Description_AlexK1919/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Printify_Automation_Update_Title_and_Description_AlexK1919/README.md",
    "summary": "Automates the process of updating product titles and descriptions on Printify using data from Google Sheets and AI-powered content generation.",
    "inputs": [
      "Manual Trigger (for testing)",
      "Google Sheets Trigger (row update event)",
      "Printify API",
      "OpenAI",
      "Wikipedia"
    ],
    "nodes_used": [
      "Manual Trigger",
      "Google Sheets Trigger",
      "Printify - Get Shops / Get Products",
      "Split Out / Split - id, title, desc",
      "Loop Over Items",
      "Brand Guidelines + Custom Instructions",
      "Wikipedia / Calculator / OpenAI",
      "Generate Title and Desc",
      "Printify - Update Product",
      "Google Sheets",
      "Sticky Notes"
    ],
    "outputs": [
      "Updated product titles and descriptions on Printify",
      "Logs and status updates in Google Sheets"
    ],
    "processed_at": "08/06/2025 15:22"
  },
  {
    "input_workflow_name": "1blBTEfOEjamDB0N_Email_form.json",
    "output_workflow_name": "Email_Form",
    "output_workflow_file_path": "analyzed_workflows/Email_Form/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Email_Form/README.md",
    "summary": "Automates email collection from a web form, verifies email validity using Hunter.io, and adds valid contacts to a SendGrid mailing list.",
    "inputs": ["Form Trigger (web form submission)", "Email address"],
    "nodes_used": [
      "Form Trigger",
      "Verify email (Hunter.io)",
      "Check if the email is valid (IF node)",
      "Add contact to list (SendGrid)",
      "Email is not valid, do nothing (NoOp)",
      "Sticky Notes"
    ],
    "outputs": ["Adds valid emails to SendGrid list", "Ignores invalid emails"],
    "processed_at": "08/06/2025 15:31"
  },
  {
    "input_workflow_name": "1dnr1k4MAVbDiBmO_Get_event_triggered_notifications___updates_on_preferred_messaging_channels_with_TwentyCRM.json",
    "output_workflow_name": "Get_event_triggered_notifications_updates_TwentyCRM",
    "output_workflow_file_path": "analyzed_workflows/Get_event_triggered_notifications_updates_TwentyCRM/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Get_event_triggered_notifications_updates_TwentyCRM/README.md",
    "summary": "Automates event-triggered notifications from TwentyCRM to Slack or Email, with event logging to Google Sheets.",
    "inputs": ["Webhook (TwentyCRM event)", "Event Data"],
    "nodes_used": [
      "on new twentycrm event (Webhook)",
      "filter required data #eventType mandatory (Set)",
      "events log (Google Sheets)",
      "message channel evaluation (IF)",
      "email channel for delete eventType (Gmail)",
      "message channel for all other eventTypes (Slack)",
      "Sticky Notes"
    ],
    "outputs": [
      "Slack message for non-delete events",
      "Gmail email for delete events",
      "Google Sheets event log"
    ],
    "processed_at": "08/06/2025 15:46"
  },
  {
    "input_workflow_name": "1g8EAij2RwhNN70t_xSend_and_check_TTS_(Text-to-speech)_voice_calls_end_email_verification.json",
    "output_workflow_name": "xSend_and_check_TTS_voice_calls_end_email_verification",
    "output_workflow_file_path": "analyzed_workflows/xSend_and_check_TTS_voice_calls_end_email_verification/workflow.json",
    "output_readme_file_path": "analyzed_workflows/xSend_and_check_TTS_voice_calls_end_email_verification/README.md",
    "summary": "Multi-factor verification workflow using TTS phone call and email code, leveraging ClickSend and SMTP.",
    "inputs": ["Form submission (phone, voice, lang, email, name)"],
    "nodes_used": [
      "On form submission (Form Trigger)",
      "Set voice code (Set)",
      "Code for voice (Code)",
      "Send Voice (HTTP Request)",
      "Verify voice code (Form)",
      "Is voice code correct? (IF)",
      "Set email code (Set)",
      "Send Email (SMTP Email)",
      "Verify email code (Form)",
      "Is email code correct? (IF)",
      "Success / Fail forms",
      "Sticky Notes"
    ],
    "outputs": [
      "TTS phone call with code",
      "Email with verification code",
      "Success/failure messages"
    ],
    "processed_at": "08/06/2025 15:49"
  },
  {
    "input_workflow_name": "2_Add_task_to_tasklist.json",
    "output_workflow_name": "Add_task_to_tasklist",
    "output_workflow_file_path": "analyzed_workflows/Add_task_to_tasklist/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Add_task_to_tasklist/README.md",
    "summary": "Adds a new task to a Google Tasklist using a manual trigger in n8n.",
    "inputs": ["Manual Trigger (On clicking 'execute')"],
    "nodes_used": ["Manual Trigger", "Google Tasks"],
    "outputs": ["New task created in the specified Google Tasklist"],
    "processed_at": "08/06/2025 16:03"
  },
  {
    "input_workflow_name": "2_Daily_Text_Affirmations.json",
    "output_workflow_name": "Daily_Text_Affirmations",
    "output_workflow_file_path": "analyzed_workflows/Daily_Text_Affirmations/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Daily_Text_Affirmations/README.md",
    "summary": "Sends daily affirmation messages to a Telegram user every morning at 9 AM using data from affirmations.dev.",
    "inputs": ["Cron (Scheduled daily at 9 AM)"],
    "nodes_used": ["Cron", "HTTP Request", "Telegram"],
    "outputs": ["Daily affirmation message sent via Telegram"],
    "processed_at": "08/06/2025 16:05"
  },
  {
    "input_workflow_name": "2_Discord_Intro.json",
    "output_workflow_name": "Discord_Intro",
    "output_workflow_file_path": "analyzed_workflows/Discord_Intro/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Discord_Intro/README.md",
    "summary": "Sends a simple introduction message to a Discord channel using a webhook when manually triggered in n8n.",
    "inputs": ["Manual Trigger (On clicking 'execute')"],
    "nodes_used": ["Manual Trigger", "Discord"],
    "outputs": ["Message sent to Discord channel via webhook"],
    "processed_at": "08/06/2025 16:06"
  },
  {
    "input_workflow_name": "2_post_to_mattermost_v2.json",
    "output_workflow_name": "Post_to_Mattermost_v2",
    "output_workflow_file_path": "analyzed_workflows/Post_to_Mattermost_v2/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Post_to_Mattermost_v2/README.md",
    "summary": "Automatically posts new items from an RSS feed to a Mastodon instance on a schedule.",
    "inputs": ["Cron"],
    "nodes_used": ["RSS Feed Read", "Function", "IF", "HTTP Request", "NoOp"],
    "outputs": ["Mastodon Status Update"],
    "processed_at": "08/06/2025 16:18"
  },
  {
    "input_workflow_name": "2_RSS_to_Telegram.json",
    "output_workflow_name": "RSS_to_Telegram",
    "output_workflow_file_path": "analyzed_workflows/RSS_to_Telegram/workflow.json",
    "output_readme_file_path": "analyzed_workflows/RSS_to_Telegram/README.md",
    "summary": "Automatically forwards new items from an RSS feed to a Telegram chat.",
    "inputs": ["Cron"],
    "nodes_used": [
      "Cron",
      "RSS Feed Read",
      "Latest Read (Function)",
      "IF",
      "Write Latest Read (Function)",
      "Telegram",
      "NoOp"
    ],
    "outputs": ["Telegram message for each new RSS item"],
    "processed_at": "08/06/2025 16:21"
  },
  {
    "input_workflow_name": "2_SIGNL4_Alert.json",
    "output_workflow_name": "SIGNL4_Alert",
    "output_workflow_file_path": "analyzed_workflows/SIGNL4_Alert/workflow.json",
    "output_readme_file_path": "analyzed_workflows/SIGNL4_Alert/README.md",
    "summary": "Automates the creation and processing of alert data files, converting between JSON and binary formats, and marking alerts as processed.",
    "inputs": ["Cron"],
    "nodes_used": [
      "Cron",
      "Write Binary File",
      "Read Binary File",
      "Binary to JSON",
      "JSON to Binary",
      "Mark as Done (Function)",
      "IF"
    ],
    "outputs": ["Processed alert data in binary and JSON files"],
    "processed_at": "08/06/2025 16:21"
  },
  {
    "input_workflow_name": "2_Syncro_to_Clockify.json",
    "output_workflow_name": "Syncro_to_Clockify",
    "output_workflow_file_path": "analyzed_workflows/Syncro_to_Clockify/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Syncro_to_Clockify/README.md",
    "summary": "Automatically logs new Syncro tickets as time entries in Clockify via webhook integration.",
    "inputs": ["Webhook"],
    "nodes_used": ["Webhook", "Clockify"],
    "outputs": ["Clockify time entry for each Syncro ticket"],
    "processed_at": "08/06/2025 16:21"
  },
  {
    "input_workflow_name": "2_Telegram_Weather_Workflow.json",
    "output_workflow_name": "Telegram_Weather_Workflow",
    "output_workflow_file_path": "analyzed_workflows/Telegram_Weather_Workflow/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Telegram_Weather_Workflow/README.md",
    "summary": "Provides current weather updates in a Telegram chat upon receiving a message trigger.",
    "inputs": ["Telegram Trigger"],
    "nodes_used": ["Telegram Trigger", "OpenWeatherMap", "Telegram"],
    "outputs": ["Telegram chat weather update message"],
    "processed_at": "08/06/2025 16:21"
  },
  {
    "input_workflow_name": "2_workflow_2.json",
    "output_workflow_name": "Workflow_2",
    "output_workflow_file_path": "analyzed_workflows/Workflow_2/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Workflow_2/README.md",
    "summary": "Exports product data from a PostgreSQL database to an Excel spreadsheet file.",
    "inputs": ["Manual/None (can be scheduled externally)"],
    "nodes_used": [
      "Run Query (Postgres)",
      "Spreadsheet File",
      "Write Binary File"
    ],
    "outputs": ["spreadsheet.xls with product data"],
    "processed_at": "08/06/2025 16:21"
  },
  {
    "input_workflow_name": "2ddwHvuidKc6lZia_AI_Agent_-_Cv_Resume_-_Automated_Screening_,_Sorting_,_Rating_and_Tracker_System.json",
    "output_workflow_name": "AI_Agent_Cv_Resume_Automated_Screening_Sorting_Rating_Tracker_System",
    "output_workflow_file_path": "analyzed_workflows/AI_Agent_Cv_Resume_Automated_Screening_Sorting_Rating_Tracker_System/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI_Agent_Cv_Resume_Automated_Screening_Sorting_Rating_Tracker_System/README.md",
    "summary": "Automates the screening, sorting, rating, and tracking of CV/resume files using Google Drive and Google Docs integrations in n8n.",
    "inputs": ["Google Drive Trigger"],
    "nodes_used": [
      "Google Drive - Resume CV File Created",
      "GDocs - Get Job Desc"
    ],
    "outputs": [
      "Initiates automated processing of new resumes, including job description retrieval and preparation for screening and rating"
    ],
    "processed_at": "08/06/2025 16:26"
  },
  {
    "input_workflow_name": "02GdRzvsuHmSSgBw_#️⃣Nostr_#damus_AI_Powered_Reporting_+_Gmail_+_Telegram.json",
    "output_workflow_name": "Nostr_Damus_AI_Powered_Reporting_Gmail_Telegram",
    "output_workflow_file_path": "analyzed_workflows/Nostr_Damus_AI_Powered_Reporting_Gmail_Telegram/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Nostr_Damus_AI_Powered_Reporting_Gmail_Telegram/README.md",
    "summary": "Automates the extraction, analysis, and reporting of Nostr (#damus) threads, generating AI-powered summaries and distributing reports via Gmail and Telegram.",
    "inputs": ["Manual Trigger"],
    "nodes_used": [
      "Manual Trigger",
      "Get HTML",
      "Get HTML Report",
      "Gmail Themes",
      "#damus Themes List",
      "#damus Thread Themes"
    ],
    "outputs": [
      "HTML and email reports summarizing Nostr #damus threads and their main themes, sent via Gmail"
    ],
    "processed_at": "08/06/2025 16:26"
  },
  {
    "input_workflow_name": "2DT5BW5tOdy87AUl_Streamline_Your_Zoom_Meetings_with_Secure,_Automated_Stripe_Payments.json",
    "output_workflow_name": "Streamline_Zoom_Stripe_Payments",
    "output_workflow_file_path": "analyzed_workflows/Streamline_Zoom_Stripe_Payments/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Streamline_Zoom_Stripe_Payments/README.md",
    "summary": "Automates the creation of Zoom meetings and the setup of Stripe payment products for seamless, secure meeting scheduling and payment processing.",
    "inputs": ["Form submission or manual trigger"],
    "nodes_used": ["Config", "Create Zoom meeting", "Create Stripe Product"],
    "outputs": [
      "A new Zoom meeting scheduled",
      "A Stripe product created for payment collection"
    ],
    "processed_at": "08/06/2025 16:30"
  },
  {
    "input_workflow_name": "2DzQ1FH11S3Gp6wn_YogiAI.json",
    "output_workflow_name": "YogiAI",
    "output_workflow_file_path": "analyzed_workflows/YogiAI/workflow.json",
    "output_readme_file_path": "analyzed_workflows/YogiAI/README.md",
    "summary": "Automates the logging and analysis of yoga practice data using AI and Google Sheets.",
    "inputs": ["Trigger (scheduled or webhook, not shown)"],
    "nodes_used": ["Azure OpenAI Chat Model2", "YogaLog"],
    "outputs": [
      "Appended rows in a Google Sheet containing the date, original JSON log, and AI-rewritten text summary of the yoga session"
    ],
    "processed_at": "08/06/2025 16:30"
  },
  {
    "input_workflow_name": "2Eba0OHGtOmoTWOU_RAG_AI_Agent_with_Milvus_and_Cohere.json",
    "output_workflow_name": "RAG_AI_Agent_with_Milvus_and_Cohere",
    "output_workflow_file_path": "analyzed_workflows/RAG_AI_Agent_with_Milvus_and_Cohere/workflow.json",
    "output_readme_file_path": "analyzed_workflows/RAG_AI_Agent_with_Milvus_and_Cohere/README.md",
    "summary": "Automates retrieval-augmented generation (RAG) by integrating LangChain, Milvus, and Cohere for document search, embedding, and chat-based responses.",
    "inputs": ["Google Drive Trigger", "Chat Trigger"],
    "nodes_used": [
      "Watch New Files",
      "Default Data Loader",
      "Embeddings Cohere",
      "When chat message received"
    ],
    "outputs": [
      "Embedded documents in Milvus for semantic search",
      "AI-powered chat responses based on uploaded documents"
    ],
    "processed_at": "08/06/2025 16:30"
  },
  {
    "input_workflow_name": "2LFEJVoSkeZMndiM_YT_AI_News_Playlist_Creator_AI_News_Form_Updater.json",
    "output_workflow_name": "YT_AI_News_Playlist_Creator_AI_News_Form_Updater",
    "output_workflow_file_path": "analyzed_workflows/YT_AI_News_Playlist_Creator_AI_News_Form_Updater/workflow.json",
    "output_readme_file_path": "analyzed_workflows/YT_AI_News_Playlist_Creator_AI_News_Form_Updater/README.md",
    "summary": "Automates the aggregation of recent YouTube videos from AI news channels and processes them for playlist or form updates using Google Sheets and YouTube Data API.",
    "inputs": ["Trigger (scheduled or manual, not shown)"],
    "nodes_used": ["Read Channel Names", "Get Videos", "Split Out"],
    "outputs": [
      "List of recent AI news videos, ready for playlist update, reporting, or further processing"
    ],
    "processed_at": "08/06/2025 17:15"
  },
  {
    "input_workflow_name": "2NhqmUqW3KruEkaE_Exponential_Backoff_for_Google_APIs.json",
    "output_workflow_name": "Exponential_Backoff_for_Google_APIs",
    "output_workflow_file_path": "analyzed_workflows/Exponential_Backoff_for_Google_APIs/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Exponential_Backoff_for_Google_APIs/README.md",
    "summary": "Implements exponential backoff logic for handling Google API rate limits or errors, ensuring reliable and resilient workflow execution.",
    "inputs": [
      "Manual Trigger",
      "(Can be extended to schedule or webhook)",
      "Loop Over Items"
    ],
    "nodes_used": [
      "Manual Trigger",
      "Loop Over Items",
      "Google Sheets",
      "Exponential Backoff",
      "Wait",
      "Stop and Error"
    ],
    "outputs": [
      "Data written to Google Sheets, or an error message if retries are exhausted"
    ],
    "processed_at": "08/06/2025 17:15"
  },
  {
    "input_workflow_name": "2pMoIW58KP6ZeGir_Luma_AI_Dream_Machine_-_Simple_v1_-_AK.json",
    "output_workflow_name": "Luma_AI_Dream_Machine_Simple_v1_AK",
    "output_workflow_file_path": "analyzed_workflows/Luma_AI_Dream_Machine_Simple_v1_AK/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Luma_AI_Dream_Machine_Simple_v1_AK/README.md",
    "summary": "Automates text-to-video generation using the Luma AI Dream Machine API, with customizable camera motion and video settings.",
    "inputs": [
      "Manual Trigger",
      "(Can be extended to schedule or webhook)",
      "Global SETTINGS"
    ],
    "nodes_used": [
      "Manual Trigger",
      "Global SETTINGS",
      "RANDOM Camera Motion",
      "Text 2 Video",
      "Sticky Note"
    ],
    "outputs": [
      "Generated video from the Luma AI Dream Machine API, based on the provided text prompt and settings"
    ],
    "processed_at": "08/06/2025 17:15"
  },
  {
    "input_workflow_name": "3_Clockify_to_Syncro.json",
    "output_workflow_name": "Clockify_to_Syncro",
    "output_workflow_file_path": "analyzed_workflows/Clockify_to_Syncro/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Clockify_to_Syncro/README.md",
    "summary": "Automates the transfer and mapping of project/task data between Clockify and Syncro, logging results in Google Sheets.",
    "inputs": ["Webhook (POST from Clockify or other sources)"],
    "nodes_used": [
      "Webhook",
      "ForSyncro",
      "FindMatch",
      "ForGoogle",
      "Google Sheets"
    ],
    "outputs": [
      "Appended rows in Google Sheets containing mapped Syncro and Clockify IDs"
    ],
    "processed_at": "08/06/2025 17:34"
  },
  {
    "input_workflow_name": "3_Daily_poems_in_Telegram.json",
    "output_workflow_name": "Daily_poems_in_Telegram",
    "output_workflow_file_path": "analyzed_workflows/Daily_poems_in_Telegram/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Daily_poems_in_Telegram/README.md",
    "summary": "Automatically sends a daily poem to a Telegram chat by fetching a random poem, translating it if needed, and formatting it for Telegram delivery.",
    "inputs": [
      "Cron (scheduled daily at 10:00 AM)",
      "HTTP Request (Poemist API)",
      "LingvaNex (translation)",
      "Telegram (chat delivery)",
      "Workflow settings (API keys, chat IDs)",
      "Poem content (from API)",
      "Translation configuration (optional)",
      "Scheduling parameters (cron)",
      "Telegram Bot credentials"
    ],
    "nodes_used": ["Cron", "HTTP Request", "LingvaNex", "Telegram"],
    "outputs": ["A formatted poem message sent to a Telegram chat"],
    "processed_at": "08/06/2025 17:36"
  },
  {
    "input_workflow_name": "3_Mailchimp.json",
    "output_workflow_name": "Mailchimp",
    "output_workflow_file_path": "analyzed_workflows/Mailchimp/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Mailchimp/README.md",
    "summary": "Automates the addition of new subscribers to a Mailchimp list via a manual trigger in n8n.",
    "inputs": [
      "Manual Trigger (user clicks 'execute' in n8n)",
      "Mailchimp list ID",
      "Subscriber email",
      "Merge fields (e.g., FNAME)",
      "Mailchimp API credentials"
    ],
    "nodes_used": ["On clicking 'execute'", "Mailchimp"],
    "outputs": ["New subscriber added to the specified Mailchimp list"],
    "processed_at": "08/06/2025 17:36"
  },
  {
    "input_workflow_name": "3_NameCheap_Dynamic_DNS_(DDNS).json",
    "output_workflow_name": "NameCheap_Dynamic_DNS_DDNS",
    "output_workflow_file_path": "analyzed_workflows/NameCheap_Dynamic_DNS_DDNS/workflow.json",
    "output_readme_file_path": "analyzed_workflows/NameCheap_Dynamic_DNS_DDNS/README.md",
    "summary": "Automates dynamic DNS updates for NameCheap domains by regularly checking the public IP address and updating DNS records when changes are detected.",
    "inputs": [
      "Cron (every 15 minutes)",
      "Checks IP if new (static data)",
      "subdomains (list of subdomains)",
      "NameCheap Dynamic DNS API credentials"
    ],
    "nodes_used": ["Cron", "Checks IP if new", "subdomains"],
    "outputs": [
      "DNS records for specified subdomains updated on NameCheap if public IP changes"
    ],
    "processed_at": "08/06/2025 17:51"
  },
  {
    "input_workflow_name": "3_StatsInstagram.json",
    "output_workflow_name": "StatsInstagram",
    "output_workflow_file_path": "analyzed_workflows/StatsInstagram/workflow.json",
    "output_readme_file_path": "analyzed_workflows/StatsInstagram/README.md",
    "summary": "Automates the reporting of Instagram statistics to a Mattermost channel, using Google Sheets for data storage and scheduled reporting.",
    "inputs": [
      "Cron (scheduled daily at 8:00 AM)",
      "Google Sheets (Instagram stats)",
      "Mattermost API credentials",
      "Sheet ID",
      "Channel ID",
      "Date/time formatting"
    ],
    "nodes_used": [
      "Cron",
      "Get the date today",
      "Date & Time",
      "Read data on Google Sheets",
      "Mattermost"
    ],
    "outputs": [
      "A formatted message posted to a Mattermost channel with Instagram stats"
    ],
    "processed_at": "08/06/2025 17:51"
  },
  {
    "input_workflow_name": "3_Orlen.json",
    "output_workflow_name": "Orlen",
    "output_workflow_file_path": "analyzed_workflows/Orlen/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Orlen/README.md",
    "summary": "Automates daily folder and file management in Google Drive, triggered both manually and on a schedule, for streamlined document organization and archiving.",
    "inputs": [
      "Manual Trigger (user clicks 'execute')",
      "Cron Trigger (every day at 23:45)"
    ],
    "nodes_used": [
      "Manual Trigger (On clicking 'execute')",
      "Cron Trigger (Every 23:45)",
      "Function (Current date)",
      "Google Drive (Get Year folder)",
      "Google Drive (Get Month folder)",
      "Gmail (Orlen Invoice)",
      "Google Drive (Upload Invoice to Google Drive)",
      "Gmail (Mark as Read)",
      "Merge",
      "Slack"
    ],
    "outputs": [
      "Year-based and month-based folders created/verified in Google Drive",
      "Invoices uploaded to Google Drive",
      "Slack notification sent",
      "Emails marked as read"
    ],
    "processed_at": "2025-06-08T18:35:29+05:00"
  },
  {
    "input_workflow_name": "3_TheHive.json",
    "output_workflow_name": "TheHive",
    "output_workflow_file_path": "analyzed_workflows/TheHive/workflow.json",
    "output_readme_file_path": "analyzed_workflows/TheHive/README.md",
    "summary": "Automates alert creation, reading, and resolution in TheHive, with integration to SIGNL4 for alert notifications and resolution, triggered by webhooks, scheduled, or manual triggers.",
    "inputs": [
      "Manual Trigger (Start (Testing))",
      "Webhook (TheHive Webhook Request)"
    ],
    "nodes_used": [
      "Manual Trigger (Start (Testing))",
      "TheHive Create Alert",
      "TheHive Read Alerts",
      "Webhook (TheHive Webhook Request)",
      "IF (Conditional logic)",
      "SIGNL4 Send Alert",
      "SIGNL4 Resolve Alert"
    ],
    "outputs": [
      "Alerts created in TheHive",
      "Alerts read from TheHive",
      "Alerts sent to SIGNL4",
      "Alerts resolved in SIGNL4"
    ],
    "processed_at": "2025-06-08T18:35:29+05:00"
  },
  {
    "input_workflow_name": "3_rss-telegram.json",
    "output_workflow_name": "rss-telegram",
    "output_workflow_file_path": "analyzed_workflows/rss-telegram/workflow.json",
    "output_readme_file_path": "analyzed_workflows/rss-telegram/README.md",
    "summary": "Automates the delivery of Instagram and Weibo RSS feed updates to Telegram channels, with logic for handling images, deduplication, and message formatting.",
    "inputs": ["Cron Trigger (scheduled, e.g., every minute)"],
    "nodes_used": [
      "Cron1",
      "instagram rss",
      "weibo rss",
      "SplitInBatches",
      "SplitInBatches1",
      "Function",
      "Function1",
      "NaN",
      "IF",
      "IF1",
      "是否重复",
      "写入图片的属性",
      "图片数量判断",
      "一张图片",
      "其他状况",
      "send",
      "Telegram",
      "test"
    ],
    "outputs": ["Posts sent to Telegram channels (with or without images)"],
    "processed_at": "2025-06-08T18:35:29+05:00"
  },
  {
    "input_workflow_name": "3_workflow_3.json",
    "output_workflow_name": "workflow_3",
    "output_workflow_file_path": "analyzed_workflows/workflow_3/workflow.json",
    "output_readme_file_path": "analyzed_workflows/workflow_3/README.md",
    "summary": "Automates the process of retrieving an image from a URL, editing it by overlaying custom text, and responding to webhook requests with the resulting image file.",
    "inputs": ["Webhook (receives HTTP requests with query parameters)"],
    "nodes_used": ["Webhook", "Read File URL", "Edit Image"],
    "outputs": [
      "Edited image file returned as the response to the webhook request"
    ],
    "processed_at": "2025-06-08T18:35:29+05:00"
  },
  {
    "input_workflow_name": "3BkxvtCbF6hHGUgM_N8N_Financial_Tracker_Telegram_Invoices_to_Notion_with_AI_Summaries_&_Reports.json",
    "output_workflow_name": "Financial_Tracker_Telegram_Invoices_to_Notion_AI_Summaries_Reports",
    "output_workflow_file_path": "analyzed_workflows/Financial_Tracker_Telegram_Invoices_to_Notion_AI_Summaries_Reports/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Financial_Tracker_Telegram_Invoices_to_Notion_AI_Summaries_Reports/README.md",
    "summary": "Automates extraction of financial data from Telegram invoice photos, summarizes with AI, records transactions in Notion, and generates weekly spending reports sent to Telegram.",
    "inputs": ["Telegram Trigger", "Schedule Trigger"],
    "nodes_used": [
      "Telegram Trigger",
      "Get Image Info",
      "Google Gemini Chat Model",
      "Basic LLM Chain",
      "Output Parser",
      "Split Out",
      "Record to Notion Database",
      "Sendback to Chat",
      "Notion (Get Recent Data)",
      "Summarize Transaction Data",
      "Convert Data to JSON Chart Payload",
      "Generate Chart",
      "Send Chart Image",
      "Sticky Notes"
    ],
    "outputs": [
      "Transaction details and summaries sent to Telegram",
      "Transaction data recorded in Notion",
      "Weekly spending chart image sent to Telegram"
    ],
    "processed_at": "08/06/2025 18:40"
  },
  {
    "input_workflow_name": "3JsfhcDcjqxx0hr3_Extract_And_Decode_Google_News_RSS_URLs_to_Clean_Article_Links.json",
    "output_workflow_name": "Google_News_RSS_Decode_to_Clean_Article_Links",
    "output_workflow_file_path": "analyzed_workflows/Google_News_RSS_Decode_to_Clean_Article_Links/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google_News_RSS_Decode_to_Clean_Article_Links/README.md",
    "summary": "Extracts and decodes Google News RSS feed URLs to produce clean, direct article links.",
    "inputs": ["Manual Trigger"],
    "nodes_used": [
      "Manual Trigger",
      "RSS Feed Read",
      "Limit",
      "HTTP Request",
      "HTML Extract",
      "Set",
      "Code",
      "Sticky Notes"
    ],
    "outputs": [
      "Clean, direct article URLs extracted from Google News RSS feed items"
    ],
    "processed_at": "08/06/2025 18:54"
  },
  {
    "input_workflow_name": "3Lih0LVosR8dZbla_Create_AI-Ready_Vector_Datasets_for_LLMs_with_Bright_Data,_Gemini_&_Pinecone.json",
    "output_workflow_name": "Create_AI-Ready_Vector_Datasets_for_LLMs_with_Bright_Data_Gemini_Pinecone",
    "output_workflow_file_path": "analyzed_workflows/Create_AI-Ready_Vector_Datasets_for_LLMs_with_Bright_Data_Gemini_Pinecone/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Create_AI-Ready_Vector_Datasets_for_LLMs_with_Bright_Data_Gemini_Pinecone/README.md",
    "summary": "Automates the creation of vector datasets for LLMs by leveraging Bright Data, Google Gemini, and Pinecone.",
    "inputs": ["Manual Trigger"],
    "nodes_used": [
      "Manual Trigger",
      "AI Agent",
      "Pinecone Vector Store",
      "Embeddings Google Gemini",
      "Default Data Loader",
      "Recursive Character Text Splitter",
      "Google Gemini Chat Model",
      "Structured Output Parser"
    ],
    "outputs": [
      "Vectorized dataset stored in Pinecone, ready for LLM search, retrieval, or fine-tuning"
    ],
    "processed_at": "08/06/2025 18:57"
  },
  {
    "input_workflow_name": "3McL3itHTso0Cy10_Automated_PDF_to_HTML_Conversion.json",
    "output_workflow_name": "Automated_PDF_to_HTML_Conversion",
    "output_workflow_file_path": "analyzed_workflows/Automated_PDF_to_HTML_Conversion/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Automated_PDF_to_HTML_Conversion/README.md",
    "summary": "Automatically converts newly uploaded PDF files in Google Drive to HTML format for easy viewing and downstream processing.",
    "inputs": ["Google Drive Trigger"],
    "nodes_used": ["Google Drive Trigger", "If", "HTTP Request"],
    "outputs": ["HTML file or content generated from the uploaded PDF"],
    "processed_at": "08/06/2025 18:59"
  },
  {
    "input_workflow_name": "3b1q6ZJTxeONrpUV_Error_Alert_and_Summarizer.json",
    "output_workflow_name": "Error_Alert_and_Summarizer",
    "output_workflow_file_path": "analyzed_workflows/Error_Alert_and_Summarizer/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Error_Alert_and_Summarizer/README.md",
    "summary": "Automatically detects workflow errors, summarizes them using OpenAI, and sends structured alerts via email or other channels.",
    "inputs": ["Error Trigger"],
    "nodes_used": [
      "Error Trigger",
      "OpenAI Chat Model",
      "Structured Output Parser",
      "Set (SET EMAIL)"
    ],
    "outputs": [
      "Structured error summary, diagnosis, cause, and resolution, ready for notification"
    ],
    "processed_at": "08/06/2025 18:59"
  },
  {
    "input_workflow_name": "3tJcVzt2OqeyjfnH_Analyze_email_headers_for_IPs_and_spoofing__3.json",
    "output_workflow_name": "Analyze_email_headers_for_IPs_and_spoofing_3",
    "output_workflow_file_path": "analyzed_workflows/Analyze_email_headers_for_IPs_and_spoofing_3/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Analyze_email_headers_for_IPs_and_spoofing_3/README.md",
    "summary": "Analyzes email headers to extract sender IPs, check for spoofing, and assess sender reputation using IP quality and security checks.",
    "inputs": ["Webhook"],
    "nodes_used": [
      "Webhook (Receive Headers)",
      "Sticky Note",
      "Code (Fraud Score)",
      "Respond to Webhook"
    ],
    "outputs": [
      "Structured JSON analysis of IP reputation, spam activity, SPF/DKIM/DMARC status, and spoofing indicators"
    ],
    "processed_at": "08/06/2025 18:59"
  },
  {
    "input_workflow_name": "3wbxkdT6hilhq0Na_Workflow_Results_to_Markdown_Notes_in_Your_Obsidian_Vault,_via_Google_Drive.json",
    "output_workflow_name": "Workflow_Results_to_Markdown_Notes_in_Your_Obsidian_Vault_via_Google_Drive",
    "output_workflow_file_path": "analyzed_workflows/Workflow_Results_to_Markdown_Notes_in_Your_Obsidian_Vault_via_Google_Drive/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Workflow_Results_to_Markdown_Notes_in_Your_Obsidian_Vault_via_Google_Drive/README.md",
    "summary": "Automatically sends workflow results from n8n to your Obsidian Vault by saving them as Markdown files in Google Drive, with instant sync to your notes.",
    "inputs": ["Workflow Output"],
    "nodes_used": ["Sticky Note", "Google Drive"],
    "outputs": [
      "Markdown (.md) notes and attachments instantly available in your Obsidian Vault"
    ],
    "processed_at": "08/06/2025 18:59"
  },
  {
    "input_workflow_name": "4_Email.json",
    "output_workflow_name": "Email",
    "output_workflow_file_path": "analyzed_workflows/Email/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Email/README.md",
    "summary": "Automatically ingests emails via IMAP and creates TheHive cases for each email with attachments and metadata.",
    "inputs": ["IMAP Email"],
    "nodes_used": ["IMAP Email", "TheHive"],
    "outputs": [
      "New case created in TheHive for each processed email, with attachments and metadata"
    ],
    "processed_at": "08/06/2025 19:03"
  },
  {
    "input_workflow_name": "4_Save_Telegram_reply_to_journal_spreadsheet.json",
    "output_workflow_name": "Save_Telegram_reply_to_journal_spreadsheet",
    "output_workflow_file_path": "analyzed_workflows/Save_Telegram_reply_to_journal_spreadsheet/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Save_Telegram_reply_to_journal_spreadsheet/README.md",
    "summary": "Automatically saves Telegram replies to a Google Sheets journal spreadsheet.",
    "inputs": ["Telegram Trigger"],
    "nodes_used": ["Telegram Trigger", "Parse Message", "Add Entry to Sheet"],
    "outputs": [
      "New row appended to a Google Sheets spreadsheet with the journal entry and date"
    ],
    "processed_at": "08/06/2025 19:08"
  },
  {
    "input_workflow_name": "4_Zammad_Open_Tickets.json",
    "output_workflow_name": "Zammad_Open_Tickets",
    "output_workflow_file_path": "analyzed_workflows/Zammad_Open_Tickets/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Zammad_Open_Tickets/README.md",
    "summary": "Fetches, filters, and summarizes open tickets from Zammad, and sends daily standup summaries via Zulip.",
    "inputs": ["Manual Trigger", "Standup Cron"],
    "nodes_used": [
      "Manual Trigger",
      "Standup Cron",
      "List Tickets",
      "Ticket Filtering",
      "Notify for Standup"
    ],
    "outputs": [
      "Summary message sent to a Zulip stream with ticket counts by status"
    ],
    "processed_at": "08/06/2025 19:08"
  },
  {
    "input_workflow_name": "4_post_to_wallabag.json",
    "output_workflow_name": "post_to_wallabag",
    "output_workflow_file_path": "analyzed_workflows/post_to_wallabag/workflow.json",
    "output_readme_file_path": "analyzed_workflows/post_to_wallabag/README.md",
    "summary": "Automatically posts new RSS feed items to Wallabag for reading and archiving.",
    "inputs": ["Cron", "Manual Trigger"],
    "nodes_used": ["Cron", "Manual Trigger", "Function", "HTTP Request"],
    "outputs": ["New RSS feed items are posted to Wallabag as entries"],
    "processed_at": "08/06/2025 19:08"
  },
  {
    "input_workflow_name": "4_workflow_4.json",
    "output_workflow_name": "workflow_4",
    "output_workflow_file_path": "analyzed_workflows/workflow_4/workflow.json",
    "output_readme_file_path": "analyzed_workflows/workflow_4/README.md",
    "summary": "Posts notifications to Slack when the n8n GitHub repository receives or loses a star.",
    "inputs": ["GitHub Trigger"],
    "nodes_used": ["GitHub Trigger", "IF", "Slack - Add", "Slack - Remove"],
    "outputs": [
      "Slack messages announcing new or removed stars, including user details and current star count"
    ],
    "processed_at": "08/06/2025 19:08"
  },
  {
    "input_workflow_name": "4AG83ybt0S3WQbkS_Daily_AI_News_Translation_&_Summary_with_GPT-4_and_Telegram_Delivery.json",
    "output_workflow_name": "Daily_AI_News_Translation_and_Summary_with_GPT-4_and_Telegram_Delivery",
    "output_workflow_file_path": "analyzed_workflows/Daily_AI_News_Translation_and_Summary_with_GPT-4_and_Telegram_Delivery/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Daily_AI_News_Translation_and_Summary_with_GPT-4_and_Telegram_Delivery/README.md",
    "summary": "Fetches, summarizes, and delivers daily AI news articles to Telegram using GPT-4 and external news APIs.",
    "inputs": ["Schedule Trigger"],
    "nodes_used": [
      "Schedule Trigger",
      "Fetch GNews Articles",
      "Fetch NewsAPI Articles",
      "GPT-4.1 Model",
      "Send Summary to Telegram"
    ],
    "outputs": ["Summarized AI news delivered to a specified Telegram chat"],
    "processed_at": "08/06/2025 19:15"
  },
  {
    "input_workflow_name": "4Tq5HZBdETVe7jEb_⚡AI-Powered_YouTube_Playlist_&_Video_Summarization_and_Analysis_v2.json",
    "output_workflow_name": "AI-Powered_YouTube_Playlist_and_Video_Summarization_and_Analysis_v2",
    "output_workflow_file_path": "analyzed_workflows/AI-Powered_YouTube_Playlist_and_Video_Summarization_and_Analysis_v2/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI-Powered_YouTube_Playlist_and_Video_Summarization_and_Analysis_v2/README.md",
    "summary": "Analyzes and summarizes YouTube playlists and videos using Google Gemini and LangChain agents.",
    "inputs": ["Manual/Query Input"],
    "nodes_used": [
      "Google Gemini Chat Model",
      "LangChain Agent",
      "Split Out",
      "Summarize & Analyze Transcript",
      "Concatenate"
    ],
    "outputs": ["Structured markdown summary of the playlist or video content"],
    "processed_at": "08/06/2025 19:15"
  },
  {
    "input_workflow_name": "4aKofiCShqdDSsIS_Import_Odoo_Product_Images_from_Google_Drive.json",
    "output_workflow_name": "Import_Odoo_Product_Images_from_Google_Drive",
    "output_workflow_file_path": "analyzed_workflows/Import_Odoo_Product_Images_from_Google_Drive/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Import_Odoo_Product_Images_from_Google_Drive/README.md",
    "summary": "Imports product images from a Google Drive folder and filters them for Odoo integration.",
    "inputs": ["Manual/Automated Trigger"],
    "nodes_used": ["Find Files (Google Drive)", "Filter Images"],
    "outputs": ["Filtered list of image files ready for Odoo import"],
    "processed_at": "08/06/2025 19:15"
  },
  {
    "input_workflow_name": "4nBQyhwqDqmXY2AL_Automated_Image_Metadata_Tagging_(Community_Node).json",
    "output_workflow_name": "Automated_Image_Metadata_Tagging_Community_Node",
    "output_workflow_file_path": "analyzed_workflows/Automated_Image_Metadata_Tagging_Community_Node/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Automated_Image_Metadata_Tagging_Community_Node/README.md",
    "summary": "Automatically tags new images uploaded to a Google Drive folder with metadata using AI and EXIF extraction.",
    "inputs": ["Google Drive Trigger"],
    "nodes_used": [
      "Google Drive Trigger",
      "Download Image File",
      "Analyze Image Content",
      "Extract EXIF Metadata"
    ],
    "outputs": ["Tagged metadata for each uploaded image"],
    "processed_at": "08/06/2025 19:15"
  },
  {
    "input_workflow_name": "4rXRDurF4mQKrHyB_comentarios_automaticos.json",
    "output_workflow_name": "comentarios_automaticos",
    "output_workflow_file_path": "analyzed_workflows/comentarios_automaticos/workflow.json",
    "output_readme_file_path": "analyzed_workflows/comentarios_automaticos/README.md",
    "summary": "Handles Instagram webhook verification and generates automated, context-aware responses to comments using AI.",
    "inputs": ["Webhook"],
    "nodes_used": [
      "Webhook",
      "Respond to Webhook",
      "AI Agent",
      "OpenRouter Chat Model"
    ],
    "outputs": [
      "Automated responses to Instagram comments, or ignores spam/irrelevant content"
    ],
    "processed_at": "08/06/2025 19:15"
  },
  {
    "input_workflow_name": "4wPgPbxtojrUO7Dx_Google_Page_Entity_Extraction_Template.json",
    "output_workflow_name": "Google_Page_Entity_Extraction_Template",
    "output_workflow_file_path": "analyzed_workflows/Google_Page_Entity_Extraction_Template/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google_Page_Entity_Extraction_Template/README.md",
    "summary": "Extracts named entities from web pages using Google Natural Language API.",
    "inputs": ["Webhook"],
    "nodes_used": [
      "Webhook",
      "Google Entities",
      "Respond to Webhook",
      "Sticky Note"
    ],
    "outputs": ["JSON response with entity analysis from Google API"],
    "processed_at": "08/06/2025 19:15"
  },
  {
    "input_workflow_name": "5_Append,_lookup,_update,_and_read_data_from_a_Google_Sheets_spreadsheet.json",
    "output_workflow_name": "Append_lookup_update_and_read_data_from_a_Google_Sheets_spreadsheet",
    "output_workflow_file_path": "analyzed_workflows/Append_lookup_update_and_read_data_from_a_Google_Sheets_spreadsheet/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Append_lookup_update_and_read_data_from_a_Google_Sheets_spreadsheet/README.md",
    "summary": "Appends, looks up, updates, and reads data from a Google Sheets spreadsheet using n8n nodes.",
    "inputs": ["Manual Trigger"],
    "nodes_used": [
      "Manual Trigger",
      "Google Sheets1",
      "Set1",
      "Google Sheets2"
    ],
    "outputs": ["Updated Google Sheets data"],
    "processed_at": "08/06/2025 19:18"
  },
  {
    "input_workflow_name": "5_Slack-GitHub_User_Info.json",
    "output_workflow_name": "Slack-GitHub_User_Info",
    "output_workflow_file_path": "analyzed_workflows/Slack-GitHub_User_Info/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Slack-GitHub_User_Info/README.md",
    "summary": "Retrieves GitHub user information and emails, and posts the details to a Slack channel.",
    "inputs": ["Webhook"],
    "nodes_used": ["Webhook", "GraphQL", "Function", "Slack"],
    "outputs": ["Slack message with GitHub user details and emails"],
    "processed_at": "08/06/2025 19:18"
  },
  {
    "input_workflow_name": "5_Syncro_Status_Update_Clockify.json",
    "output_workflow_name": "Syncro_Status_Update_Clockify",
    "output_workflow_file_path": "analyzed_workflows/Syncro_Status_Update_Clockify/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Syncro_Status_Update_Clockify/README.md",
    "summary": "Updates project status in Clockify based on incoming webhook events.",
    "inputs": ["Webhook"],
    "nodes_used": ["Webhook", "Clockify", "HTTP Request", "IF1"],
    "outputs": ["Updated project status in Clockify"],
    "processed_at": "08/06/2025 19:18"
  },
  {
    "input_workflow_name": "5_bash-dash_telegram.json",
    "output_workflow_name": "bash-dash_telegram",
    "output_workflow_file_path": "analyzed_workflows/bash-dash_telegram/workflow.json",
    "output_readme_file_path": "analyzed_workflows/bash-dash_telegram/README.md",
    "summary": "Receives webhook requests and sends messages to a Telegram chat using n8n.",
    "inputs": ["Webhook"],
    "nodes_used": ["Webhook", "Telegram", "Set"],
    "outputs": ["Message sent to a Telegram chat"],
    "processed_at": "08/06/2025 19:18"
  },
  {
    "input_workflow_name": "5_new.json",
    "output_workflow_name": "new",
    "output_workflow_file_path": "analyzed_workflows/new/workflow.json",
    "output_readme_file_path": "analyzed_workflows/new/README.md",
    "summary": "Fetches GitHub repository profile information when triggered manually.",
    "inputs": ["Manual Trigger"],
    "nodes_used": ["Manual Trigger", "Github"],
    "outputs": ["GitHub repository profile data"],
    "processed_at": "08/06/2025 19:18"
  },
  {
    "input_workflow_name": "5dcd71e5db772d996680f0be_Example_-_Backup_n8n_to_Nextcloud.json",
    "output_workflow_name": "Backup_n8n_Workflows_to_Nextcloud",
    "output_workflow_file_path": "analyzed_workflows/Backup_n8n_Workflows_to_Nextcloud/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Backup_n8n_Workflows_to_Nextcloud/README.md",
    "summary": "Backs up all n8n workflow definitions to a Nextcloud instance on a scheduled basis or manual trigger.",
    "inputs": ["Manual Trigger", "Cron"],
    "nodes_used": [
      "Manual Trigger",
      "Cron",
      "Get Workflow List (HTTP Request)",
      "Map (Function)",
      "Get Workflow (HTTP Request)",
      "Merge",
      "Move Binary Data",
      "FunctionItem",
      "NextCloud1"
    ],
    "outputs": ["JSON backup files of each n8n workflow stored in Nextcloud"],
    "processed_at": "08/06/2025 19:23"
  },
  {
    "input_workflow_name": "5DiXT9FykJvuElc1_Get_Comments_from_Facebook_Page.json",
    "output_workflow_name": "Get_Comments_from_Facebook_Page",
    "output_workflow_file_path": "analyzed_workflows/Get_Comments_from_Facebook_Page/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Get_Comments_from_Facebook_Page/README.md",
    "summary": "Fetches, filters, and processes comments from a Facebook Page using n8n.",
    "inputs": ["Manual Trigger"],
    "nodes_used": [
      "Manual Trigger",
      "Split Out Comments",
      "Filter Out Null Comments",
      "Select Result Field"
    ],
    "outputs": ["Structured list of valid comments from the Facebook Page"],
    "processed_at": "08/06/2025 19:25"
  },
  {
    "input_workflow_name": "5ec2322573f7590007802e1f_Extranet_Releases.json",
    "output_workflow_name": "Extranet_Releases",
    "output_workflow_file_path": "analyzed_workflows/Extranet_Releases/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Extranet_Releases/README.md",
    "summary": "Posts notifications to Slack when a new release occurs in a specified GitHub repository.",
    "inputs": ["GitHub Trigger"],
    "nodes_used": ["Github Trigger", "Slack"],
    "outputs": ["Slack notification with release details"],
    "processed_at": "08/06/2025 19:25"
  },
  {
    "input_workflow_name": "5kYHogzDGeo21MxE_Automate_Figma_Versioning_and_Jira_Updates_with_n8n_Webhook_Integration.json",
    "output_workflow_name": "Automate_Figma_Versioning_and_Jira_Updates",
    "output_workflow_file_path": "analyzed_workflows/Automate_Figma_Versioning_and_Jira_Updates/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Automate_Figma_Versioning_and_Jira_Updates/README.md",
    "summary": "Automates Figma versioning updates and posts comments to Jira issues via webhook integration.",
    "inputs": ["Figma Trigger"],
    "nodes_used": [
      "Figma Trigger",
      "Find Jira Issue",
      "Add Comment in Issue",
      "Sticky Note"
    ],
    "outputs": ["Comment added to the corresponding Jira issue"],
    "processed_at": "08/06/2025 19:25"
  },
  {
    "input_workflow_name": "5lMPjSDuoMvCJnko_🔍🛠️Generate_SEO-Optimized_WordPress_Content_with_Perplexity_Research.json",
    "output_workflow_name": "Generate_SEO_Optimized_WordPress_Content_with_Perplexity_Research",
    "output_workflow_file_path": "analyzed_workflows/Generate_SEO_Optimized_WordPress_Content_with_Perplexity_Research/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Generate_SEO_Optimized_WordPress_Content_with_Perplexity_Research/README.md",
    "summary": "Generates SEO-optimized WordPress blog posts using Perplexity AI research and automation.",
    "inputs": ["Manual Trigger or Webhook"],
    "nodes_used": ["Sticky Note", "WordPress", "Other Nodes"],
    "outputs": ["Draft blog post created in WordPress"],
    "processed_at": "08/06/2025 19:25"
  },
  {
    "input_workflow_name": "6_ETL_pipeline.json",
    "output_workflow_name": "ETL_pipeline",
    "output_workflow_file_path": "analyzed_workflows/ETL_pipeline/workflow.json",
    "output_readme_file_path": "analyzed_workflows/ETL_pipeline/README.md",
    "summary": "Extracts tweets, performs sentiment analysis, stores results in MongoDB and Postgres, and notifies via Slack.",
    "inputs": [],
    "nodes_used": ["Twitter", "MongoDB", "Postgres", "Slack", "IF"],
    "outputs": [
      "Tweets with sentiment scores stored in databases and posted to Slack"
    ],
    "processed_at": "08/06/2025 19:31"
  },
  {
    "input_workflow_name": "6_workflow_6.json",
    "output_workflow_name": "Google_Sheets_BiDirectional_Sync",
    "output_workflow_file_path": "analyzed_workflows/Google_Sheets_BiDirectional_Sync/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google_Sheets_BiDirectional_Sync/README.md",
    "summary": "Synchronizes data between two Google Sheets in both directions on a scheduled basis.",
    "inputs": ["Cron"],
    "nodes_used": ["Cron", "Read Sheet", "Write Sheet 1", "Write Sheet 2"],
    "outputs": ["Updated data in both target Google Sheets"],
    "processed_at": "08/06/2025 19:31"
  },
  {
    "input_workflow_name": "6_workflow_6 copy.json",
    "output_workflow_name": "Google_Sheets_BiDirectional_Sync_2",
    "output_workflow_file_path": "analyzed_workflows/Google_Sheets_BiDirectional_Sync_2/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google_Sheets_BiDirectional_Sync_2/README.md",
    "summary": "Synchronizes data between two Google Sheets in both directions on a scheduled basis (duplicate workflow).",
    "inputs": ["Cron"],
    "nodes_used": ["Cron", "Read Sheet", "Write Sheet 1", "Write Sheet 2"],
    "outputs": ["Updated data in both target Google Sheets"],
    "processed_at": "08/06/2025 19:31"
  },
  {
    "input_workflow_name": "5Y8QXJ3N67wnmR2R_POC_-_Chatbot_Order_by_Sheet_Data.json",
    "output_workflow_name": "POC_Chatbot_Order_by_Sheet_Data",
    "output_workflow_file_path": "analyzed_workflows/POC_Chatbot_Order_by_Sheet_Data/workflow.json",
    "output_readme_file_path": "analyzed_workflows/POC_Chatbot_Order_by_Sheet_Data/README.md",
    "summary": "A proof-of-concept chatbot workflow that retrieves product data from a sheet and allows users to order products via chat.",
    "inputs": ["Chat OpenAI"],
    "nodes_used": [
      "Chat OpenAI",
      "Calculator",
      "Window Buffer Memory",
      "Get Products",
      "Order Product"
    ],
    "outputs": ["Orders placed and product information returned to the user"],
    "processed_at": "08/06/2025 19:44"
  },
  {
    "input_workflow_name": "5Ycrm1MuK8htwd96_Telegram_RAG_pdf.json",
    "output_workflow_name": "Telegram_RAG_pdf",
    "output_workflow_file_path": "analyzed_workflows/Telegram_RAG_pdf/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Telegram_RAG_pdf/README.md",
    "summary": "A workflow that enables retrieval-augmented generation (RAG) using Telegram as the interface and PDF documents as the knowledge source.",
    "inputs": ["Telegram Trigger"],
    "nodes_used": [
      "Telegram Trigger",
      "Default Data Loader",
      "Recursive Character Text Splitter",
      "Embeddings OpenAI"
    ],
    "outputs": ["Answers to user queries based on uploaded PDF content"],
    "processed_at": "08/06/2025 19:44"
  },
  {
    "input_workflow_name": "5opbTWPZRN05bYdz_Build_an_MCP_Server_with_Google_Calendar.json",
    "output_workflow_name": "Build_an_MCP_Server_with_Google_Calendar",
    "output_workflow_file_path": "analyzed_workflows/Build_an_MCP_Server_with_Google_Calendar/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Build_an_MCP_Server_with_Google_Calendar/README.md",
    "summary": "A workflow to demonstrate building an MCP server integrated with Google Calendar for event management.",
    "inputs": [],
    "nodes_used": ["Sticky Notes", "Other Nodes"],
    "outputs": ["Google Calendar events managed via MCP server"],
    "processed_at": "08/06/2025 19:44"
  },
  {
    "input_workflow_name": "6FSx5OMVxp8Ldg8A_Prepare_CSV_files_with_GPT-4.json",
    "output_workflow_name": "Prepare_CSV_files_with_GPT_4",
    "output_workflow_file_path": "analyzed_workflows/Prepare_CSV_files_with_GPT_4/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Prepare_CSV_files_with_GPT_4/README.md",
    "summary": "Helper workflow to generate mock user data with GPT-4 and prepare CSV files for testing or demo purposes.",
    "inputs": ["Manual Trigger"],
    "nodes_used": [
      "Manual Trigger",
      "OpenAI",
      "Split In Batches",
      "Sticky Note"
    ],
    "outputs": ["Mock user data, suitable for export as CSV files"],
    "processed_at": "09/06/2025 17:22"
  },
  {
    "input_workflow_name": "6LeAm5UyENgTdwkv_agente.json",
    "output_workflow_name": "agente",
    "output_workflow_file_path": "analyzed_workflows/agente/workflow.json",
    "output_readme_file_path": "analyzed_workflows/agente/README.md",
    "summary": "AI-powered assistant for clinical appointment rescheduling and shopping list management via Telegram.",
    "inputs": ["Telegram Message"],
    "nodes_used": [
      "OpenAI Chat Model",
      "Assistente clinica interno",
      "Google Tasks",
      "MCP Google Calendar"
    ],
    "outputs": ["Rescheduled appointments and updated shopping list entries"],
    "processed_at": "09/06/2025 17:22"
  },
  {
    "input_workflow_name": "6MRJ2tfl8c2f3AuE_💥🛠️Build_a_Web_Search_Chatbot_with_GPT-4o_and_MCP_Brave_Search.json",
    "output_workflow_name": "Build_a_Web_Search_Chatbot_with_GPT_4o_and_MCP_Brave_Search",
    "output_workflow_file_path": "analyzed_workflows/Build_a_Web_Search_Chatbot_with_GPT_4o_and_MCP_Brave_Search/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Build_a_Web_Search_Chatbot_with_GPT_4o_and_MCP_Brave_Search/README.md",
    "summary": "A chatbot workflow that uses GPT-4o and MCP Brave Search to answer user queries with up-to-date web information.",
    "inputs": ["Chat Message Trigger"],
    "nodes_used": [
      "AI Agent",
      "Chat Trigger",
      "MCP Get Brave Tools",
      "MCP Execute Brave Search",
      "Simple Memory"
    ],
    "outputs": ["Answers to user queries based on live web search results"],
    "processed_at": "09/06/2025 17:22"
  },
  {
    "input_workflow_name": "6bMVzmrbPexvBe6q_YouTube_to_Airtable_Anonym.json",
    "output_workflow_name": "YouTube_to_Airtable_Anonym",
    "output_workflow_file_path": "analyzed_workflows/YouTube_to_Airtable_Anonym/workflow.json",
    "output_readme_file_path": "analyzed_workflows/YouTube_to_Airtable_Anonym/README.md",
    "summary": "Extracts YouTube video transcripts and stores them in Airtable in an anonymized workflow.",
    "inputs": [],
    "nodes_used": [
      "Get Video ID",
      "Get video transcript",
      "Combine Transcripts",
      "Other Nodes"
    ],
    "outputs": ["YouTube video transcripts stored in Airtable"],
    "processed_at": "09/06/2025 17:22"
  },
  {
    "input_workflow_name": "6pOGYw5O3iOY1Gc6_Remote_IOT_Sensor_monitoring_via_MQTT_and_InfluxDB.json",
    "output_workflow_name": "Remote_IOT_Sensor_monitoring_via_MQTT_and_InfluxDB",
    "output_workflow_file_path": "analyzed_workflows/Remote_IOT_Sensor_monitoring_via_MQTT_and_InfluxDB/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Remote_IOT_Sensor_monitoring_via_MQTT_and_InfluxDB/README.md",
    "summary": "Monitors remote IoT sensor data via MQTT and stores it in InfluxDB for time-series analysis.",
    "inputs": ["MQTT Trigger"],
    "nodes_used": [
      "MQTT Trigger",
      "Sticky Notes",
      "HTTP Request",
      "Other Nodes"
    ],
    "outputs": ["Sensor data stored in InfluxDB"],
    "processed_at": "09/06/2025 17:22"
  },
  {
    "input_workflow_name": "6sBxOuYYcJjIBmVJ_Automating_Betting_Data_Retrieval_with_TheOddsAPI_and_Airtable.json",
    "output_workflow_name": "Automating_Betting_Data_Retrieval_with_TheOddsAPI_and_Airtable",
    "output_workflow_file_path": "analyzed_workflows/Automating_Betting_Data_Retrieval_with_TheOddsAPI_and_Airtable/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Automating_Betting_Data_Retrieval_with_TheOddsAPI_and_Airtable/README.md",
    "summary": "Automates the retrieval of betting data from TheOddsAPI and stores results in Airtable.",
    "inputs": ["Schedule Triggers"],
    "nodes_used": [
      "Schedule Triggers",
      "HTTP Requests",
      "Sticky Notes",
      "Other Nodes"
    ],
    "outputs": ["Betting odds and results stored in Airtable"],
    "processed_at": "09/06/2025 17:22"
  },
  {
    "input_workflow_name": "6yNJxDjV9rSiOkj9_AI_Agent_with_charts_capabilities_using_OpenAI_Structured_Output.json",
    "output_workflow_name": "AI_Agent_with_charts_capabilities_using_OpenAI_Structured_Output",
    "output_workflow_file_path": "analyzed_workflows/AI_Agent_with_charts_capabilities_using_OpenAI_Structured_Output/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI_Agent_with_charts_capabilities_using_OpenAI_Structured_Output/README.md",
    "summary": "AI agent workflow that generates charts based on user queries using OpenAI's structured output and integrated tools.",
    "inputs": [],
    "nodes_used": [
      "OpenAI Chat Model",
      "Window Buffer Memory",
      "Generate a chart",
      "Execute \"Generate a chart\" tool",
      "OpenAI - Generate Chart definition with Structured Output"
    ],
    "outputs": ["Charts generated based on user queries"],
    "processed_at": "09/06/2025 17:22"
  },
  {
    "input_workflow_name": "6Yzmlp5xF6oHo1VW_Text_to_Speech_(OpenAI).json",
    "output_workflow_name": "Text to Speech (OpenAI)",
    "output_workflow_file_path": "analyzed_workflows/Text_to_Speech_OpenAI/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Text_to_Speech_OpenAI/README.md",
    "summary": "Converts input text into speech audio using OpenAI's Text-to-Speech (TTS) API.",
    "inputs": ["n8n-nodes-base.manualTrigger"],
    "nodes_used": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": ["MP3 audio file generated by OpenAI's TTS API"],
    "processed_at": "09/06/2025 19:51"
  },
  {
    "input_workflow_name": "6zSE618gr9fDtAfF_🤖🧑‍💻_AI_Agent__for_Top_n8n_Creators_Leaderboard_Reporting.json",
    "output_workflow_name": "AI Agent for Top n8n Creators Leaderboard Reporting",
    "output_workflow_file_path": "analyzed_workflows/AI_Agent_for_Top_n8n_Creators_Leaderboard_Reporting/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI_Agent_for_Top_n8n_Creators_Leaderboard_Reporting/README.md",
    "summary": "Aggregates and reports leaderboard statistics for top n8n creators using external data sources and OpenAI for analysis.",
    "inputs": ["n8n-nodes-base.executeWorkflowTrigger"],
    "nodes_used": [
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.aggregate",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.toolWorkflow"
    ],
    "outputs": [
      "Aggregated statistics and AI-generated reports on top n8n creators"
    ],
    "processed_at": "09/06/2025 19:51"
  },
  {
    "input_workflow_name": "7_6.json",
    "output_workflow_name": "Hubspot Contact Export",
    "output_workflow_file_path": "analyzed_workflows/Hubspot_Contact_Export/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Hubspot_Contact_Export/README.md",
    "summary": "Exports all Hubspot contacts using a manual trigger in n8n.",
    "inputs": ["n8n-nodes-base.manualTrigger"],
    "nodes_used": ["n8n-nodes-base.manualTrigger", "n8n-nodes-base.hubspot"],
    "outputs": ["List of all contacts from Hubspot"],
    "processed_at": "09/06/2025 19:51"
  },
  {
    "input_workflow_name": "7_Coffee_Bot_(Mattermost).json",
    "output_workflow_name": "Coffee Bot (Mattermost)",
    "output_workflow_file_path": "analyzed_workflows/Coffee_Bot_Mattermost/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Coffee_Bot_Mattermost/README.md",
    "summary": "Automatically forms random groups for virtual coffee chats and announces them in a Mattermost channel, with calendar invites.",
    "inputs": ["n8n-nodes-base.cron"],
    "nodes_used": [
      "n8n-nodes-base.cron",
      "n8n-nodes-base.mattermost",
      "n8n-nodes-base.function",
      "n8n-nodes-base.googleCalendar"
    ],
    "outputs": [
      "Announcements in Mattermost and Google Calendar invites for each group"
    ],
    "processed_at": "09/06/2025 19:51"
  },
  {
    "input_workflow_name": "7_Daily_Language_Learning.json",
    "output_workflow_name": "Daily Language Learning",
    "output_workflow_file_path": "analyzed_workflows/Daily_Language_Learning/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Daily_Language_Learning/README.md",
    "summary": "Delivers daily language learning content by extracting words from top Hacker News articles, translating them, and sending them via SMS.",
    "inputs": ["n8n-nodes-base.cron"],
    "nodes_used": [
      "n8n-nodes-base.cron",
      "n8n-nodes-base.hackerNews",
      "n8n-nodes-base.function",
      "n8n-nodes-base.lingvaNex",
      "n8n-nodes-base.set",
      "n8n-nodes-base.airtable",
      "n8n-nodes-base.vonage"
    ],
    "outputs": ["SMS with daily words and translations; records in Airtable"],
    "processed_at": "09/06/2025 19:51"
  },
  {
    "input_workflow_name": "7_Publish_post_to_a_publication.json",
    "output_workflow_name": "Publish post to a publication",
    "output_workflow_file_path": "analyzed_workflows/Publish_post_to_a_publication/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Publish_post_to_a_publication/README.md",
    "summary": "Publishes a post to Medium (or similar platform) using a manual trigger in n8n.",
    "inputs": ["n8n-nodes-base.manualTrigger"],
    "nodes_used": ["n8n-nodes-base.manualTrigger", "n8n-nodes-base.medium"],
    "outputs": ["Post published to the specified Medium publication"],
    "processed_at": "09/06/2025 19:51"
  },
  {
    "input_workflow_name": "7_YouTube_to_Raindrop.json",
    "output_workflow_name": "YouTube to Raindrop",
    "output_workflow_file_path": "analyzed_workflows/YouTube_to_Raindrop/workflow.json",
    "output_readme_file_path": "analyzed_workflows/YouTube_to_Raindrop/README.md",
    "summary": "Saves new YouTube playlist items as bookmarks in Raindrop, filtering out previously saved videos.",
    "inputs": ["n8n-nodes-base.manualTrigger", "n8n-nodes-base.cron"],
    "nodes_used": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.cron",
      "n8n-nodes-base.youTube",
      "n8n-nodes-base.functionItem",
      "n8n-nodes-base.function",
      "n8n-nodes-base.raindrop"
    ],
    "outputs": ["New YouTube videos saved as bookmarks in Raindrop"],
    "processed_at": "09/06/2025 19:51"
  },
  {
    "input_workflow_name": "7DPLpEkww5Uctcml_get_a_web_page.json",
    "output_workflow_name": "Get a Web Page",
    "output_workflow_file_path": "analyzed_workflows/Get_a_Web_Page/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Get_a_Web_Page/README.md",
    "summary": "Fetches a web page using FireCrawl API and processes the content for downstream automation.",
    "inputs": ["n8n-nodes-base.executeWorkflowTrigger"],
    "nodes_used": [
      "n8n-nodes-base.executeWorkflowTrigger",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": ["Web page content as JSON"],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7Gw4IfHaVMDSj70o_Convert_Squarespace_Profiles_to_Shopify_Customers_in_Google_Sheets.json",
    "output_workflow_name": "Convert Squarespace Profiles to Shopify Customers in Google Sheets",
    "output_workflow_file_path": "analyzed_workflows/Convert_Squarespace_Profiles_to_Shopify_Customers_in_Google_Sheets/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Convert_Squarespace_Profiles_to_Shopify_Customers_in_Google_Sheets/README.md",
    "summary": "Automates conversion of Squarespace profile data to Shopify customer records and saves them in Google Sheets.",
    "inputs": ["n8n-nodes-base.webhook"],
    "nodes_used": ["n8n-nodes-base.webhook", "n8n-nodes-base.googleSheets"],
    "outputs": ["Shopify customer data in Google Sheets"],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7cXvgkl9170QXzT2_RAG_Workflow_For_Company_Documents_stored_in_Google_Drive.json",
    "output_workflow_name": "RAG Workflow For Company Documents stored in Google Drive",
    "output_workflow_file_path": "analyzed_workflows/RAG_Workflow_For_Company_Documents_stored_in_Google_Drive/workflow.json",
    "output_readme_file_path": "analyzed_workflows/RAG_Workflow_For_Company_Documents_stored_in_Google_Drive/README.md",
    "summary": "Indexes and retrieves company documents from Google Drive for RAG-based question answering using Pinecone and Google Gemini.",
    "inputs": ["n8n-nodes-base.googleDriveTrigger"],
    "nodes_used": [
      "n8n-nodes-base.googleDriveTrigger",
      "n8n-nodes-base.googleDrive",
      "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "@n8n/n8n-nodes-langchain.toolVectorStore",
      "@n8n/n8n-nodes-langchain.agent",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": ["AI-powered answers to employee questions using company docs"],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7eyNPahKcCuqK39V_DeepSeek_v3.1.json",
    "output_workflow_name": "DeepSeek v3.1",
    "output_workflow_file_path": "analyzed_workflows/DeepSeek_v3.1/workflow.json",
    "output_readme_file_path": "analyzed_workflows/DeepSeek_v3.1/README.md",
    "summary": "Automates content creation and publishing using Notion, AI Task Planner, WordPress, and Gmail integration.",
    "inputs": ["n8n-nodes-base.notionTrigger"],
    "nodes_used": [
      "n8n-nodes-base.notionTrigger",
      "@n8n/n8n-nodes-langchain.agent",
      "n8n-nodes-base.gmailTool",
      "n8n-nodes-base.wordpressTool",
      "n8n-nodes-mcp.mcpClientTool",
      "n8n-nodes-base.set",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": [
      "SEO-optimized blog post draft, email notification, Notion update"
    ],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7fdJOvYNILCr24fH_Read_sitemap_and_filter_URLs.json",
    "output_workflow_name": "Read sitemap and filter URLs",
    "output_workflow_file_path": "analyzed_workflows/Read_sitemap_and_filter_URLs/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Read_sitemap_and_filter_URLs/README.md",
    "summary": "Reads a sitemap.xml, converts it to JSON, and filters URLs based on custom logic (default: PDFs only).",
    "inputs": ["n8n-nodes-base.manualTrigger"],
    "nodes_used": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.xml",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.filter",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": ["Filtered URLs from sitemap"],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7gRbzEzCuOzQKn4M_SHEETS_RAG.json",
    "output_workflow_name": "SHEETS RAG",
    "output_workflow_file_path": "analyzed_workflows/SHEETS_RAG/workflow.json",
    "output_readme_file_path": "analyzed_workflows/SHEETS_RAG/README.md",
    "summary": "Automates ingestion, schema inference, and AI-powered querying of Google Sheets data using Gemini and Langchain.",
    "inputs": ["n8n-nodes-base.googleDriveTrigger"],
    "nodes_used": [
      "n8n-nodes-base.googleDriveTrigger",
      "n8n-nodes-base.set",
      "n8n-nodes-base.code",
      "@n8n/n8n-nodes-langchain.toolWorkflow",
      "@n8n/n8n-nodes-langchain.lmChatGoogleGemini"
    ],
    "outputs": ["SQL and AI-powered answers over Google Sheets data"],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7i2RqqCYaKHUt4n3_Google_Site_Index_-_sitemap.xml_example.json",
    "output_workflow_name": "Google Site Index - sitemap.xml example",
    "output_workflow_file_path": "analyzed_workflows/Google_Site_Index_-_sitemap.xml_example/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google_Site_Index_-_sitemap.xml_example/README.md",
    "summary": "Extracts URLs from a sitemap.xml, checks Google Indexing API status, and notifies Google of updates using manual or scheduled triggers.",
    "inputs": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.scheduleTrigger"
    ],
    "nodes_used": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.scheduleTrigger",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.splitInBatches",
      "n8n-nodes-base.if",
      "n8n-nodes-base.wait",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": ["Google Indexing API notifications for new/updated URLs"],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7zRCNv7B5WFRg7ux_Restore_your_credentials_from_GitHub.json",
    "output_workflow_name": "Restore your credentials from GitHub",
    "output_workflow_file_path": "analyzed_workflows/Restore_your_credentials_from_GitHub/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Restore_your_credentials_from_GitHub/README.md",
    "summary": "Automates the restoration of all n8n instance credentials from backups stored in a GitHub repository. Fetches credential files, parses them, and restores them into n8n, skipping empty files and the n8n account API credential.",
    "inputs": [
      "repo.owner (GitHub username)",
      "repo.name (GitHub repository)",
      "repo.path (folder in repo)",
      "GitHub account credential",
      "n8n account credential"
    ],
    "nodes_used": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.github",
      "n8n-nodes-base.extractFromFile",
      "n8n-nodes-base.if",
      "n8n-nodes-base.n8n"
    ],
    "outputs": [
      "Imported credentials restored into the n8n instance",
      "Skipped files (empty or n8n account API) are not restored"
    ],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7zRCNv7B5WFRg7ux_Restore_your_credentials_from_GitHub.json",
    "output_workflow_name": "Restore your credentials from GitHub",
    "output_workflow_file_path": "analyzed_workflows/Restore_your_credentials_from_GitHub/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Restore_your_credentials_from_GitHub/README.md",
    "summary": "Automates the restoration of all n8n instance credentials from backups stored in a GitHub repository. Fetches credential files, parses them, and restores them into n8n, skipping empty files and the n8n account API credential.",
    "inputs": [
      "repo.owner (GitHub username)",
      "repo.name (GitHub repository)",
      "repo.path (folder in repo)",
      "GitHub account credential",
      "n8n account credential"
    ],
    "nodes_used": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.stickyNote",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.github",
      "n8n-nodes-base.extractFromFile",
      "n8n-nodes-base.if",
      "n8n-nodes-base.n8n"
    ],
    "outputs": [
      "Imported credentials restored into the n8n instance",
      "Skipped files (empty or n8n account API) are not restored"
    ],
    "processed_at": "10/06/2025 13:15"
  },
  {
    "input_workflow_name": "7Pw91QNT4UGeNmL5_Customer_and_Sales_Support.json",
    "output_workflow_name": "Customer and Sales Support",
    "output_workflow_file_path": "analyzed_workflows/Customer_and_Sales_Support/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Customer_and_Sales_Support/README.md",
    "summary": "Automates customer and sales support for 'My Apple Case' by handling chat-based queries, placing orders, and updating inventory in Google Sheets using AI-powered agent logic.",
    "inputs": ["@n8n/n8n-nodes-langchain.chatTrigger"],
    "nodes_used": [
      "@n8n/n8n-nodes-langchain.chatTrigger",
      "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "n8n-nodes-base.googleSheetsTool",
      "@n8n/n8n-nodes-langchain.agent"
    ],
    "outputs": [
      "Orders appended to Google Sheets",
      "Inventory updated in Google Sheets",
      "AI-powered chat responses to customers"
    ],
    "processed_at": "10/06/2025 14:15"
  },
  {
    "input_workflow_name": "7Qa2mH7PnDxy7Qat_Generate_Exam_Questions.json",
    "output_workflow_name": "Generate Exam Questions",
    "output_workflow_file_path": "analyzed_workflows/Generate_Exam_Questions/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Generate_Exam_Questions/README.md",
    "summary": "Automates the generation, embedding, and storage of exam questions using AI models and vector databases for downstream retrieval and analysis.",
    "inputs": ["n8n-nodes-base.manualTrigger"],
    "nodes_used": [
      "n8n-nodes-base.manualTrigger",
      "n8n-nodes-base.httpRequest",
      "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
      "n8n-nodes-base.googleDocs",
      "n8n-nodes-base.code",
      "n8n-nodes-base.convertToFile",
      "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "@n8n/n8n-nodes-langchain.retrieverVectorStore",
      "n8n-nodes-base.splitInBatches",
      "@n8n/n8n-nodes-langchain.outputParserItemList",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": [
      "Exam questions embedded and stored in Qdrant vector store",
      "Markdown and text file versions of questions",
      "Processed Google Docs content"
    ],
    "processed_at": "10/06/2025 14:15"
  },
  {
    "input_workflow_name": "7ZIG5xxEACMBgj4Z_Create_Threads_on_Bluesky.json",
    "output_workflow_name": "Create Threads on Bluesky",
    "output_workflow_file_path": "analyzed_workflows/Create_Threads_on_Bluesky/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Create_Threads_on_Bluesky/README.md",
    "summary": "Automates the process of creating threads (posts and replies) on the Bluesky social platform, including credential setup, authentication, and structured thread posting.",
    "inputs": ["n8n-nodes-base.scheduleTrigger"],
    "nodes_used": [
      "n8n-nodes-base.scheduleTrigger",
      "n8n-nodes-base.set",
      "n8n-nodes-base.httpRequest",
      "n8n-nodes-base.code",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": ["Posts and threaded replies on Bluesky"],
    "processed_at": "10/06/2025 14:15"
  },
  {
    "input_workflow_name": "7wwY8wfZdNpL83QQ_LinkedIn_Leads_Scraping_&_Enrichment_(Main).json",
    "output_workflow_name": "LinkedIn Leads Scraping & Enrichment (Main)",
    "output_workflow_file_path": "analyzed_workflows/LinkedIn_Leads_Scraping_Enrichment_Main/workflow.json",
    "output_readme_file_path": "analyzed_workflows/LinkedIn_Leads_Scraping_Enrichment_Main/README.md",
    "summary": "Automates the scraping of LinkedIn leads and enrichment of their data using form submissions and Google Sheets triggers, with AI-powered processing and enrichment.",
    "inputs": [
      "n8n-nodes-base.formTrigger",
      "n8n-nodes-base.googleSheetsTrigger"
    ],
    "nodes_used": [
      "n8n-nodes-base.formTrigger",
      "n8n-nodes-base.splitOut",
      "n8n-nodes-base.googleSheetsTrigger",
      "@n8n/n8n-nodes-langchain.openAi",
      "n8n-nodes-base.stickyNote"
    ],
    "outputs": [
      "Enriched lead data in Google Sheets",
      "Cleaned LinkedIn usernames"
    ],
    "processed_at": "10/06/2025 15:59"
  }
]
