[
  {
    "input_workflow_name": "8Sbrzc7Au3ZGf62p_Publish_Videos_&_Images_-_Blotato.json",
    "output_workflow_name": "Social Media Multi-Platform Publisher",
    "output_workflow_file_path": "analyzed_workflows/Social Media Multi-Platform Publisher/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Social Media Multi-Platform Publisher/README.md",
    "summary": "Automates publishing videos and images to multiple social media platforms using Blotato as the backend.",
    "inputs": ["Manual"],
    "nodes_used": ["Airtable", "Set", "HTTP Request", "Sticky Note"],
    "outputs": ["Instagram Post", "Facebook Post", "LinkedIn Post", "TikTok Post", "Pinterest Post", "YouTube Post", "Threads Post", "Twitter Post", "Bluesky Post", "Airtable Update"],
    "processed_at": "11/06/2025 22:07"
  }
  ,
  {
    "input_workflow_name": "8n0VYmvJgISwezyz_Build_your_first_AI_MCP_Server.json",
    "output_workflow_name": "Build Your First AI MCP Server",
    "output_workflow_file_path": "analyzed_workflows/Build Your First AI MCP Server/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Build Your First AI MCP Server/README.md",
    "summary": "Demonstrates how to build an AI-powered MCP (Multi-Channel Platform) server for workflow automation, integrating Google Calendar and custom text-processing tools.",
    "inputs": ["Chat message received", "Webhook (MCP trigger)", "Executed by another workflow"],
    "nodes_used": ["AI Agent", "Google Calendar Tool", "Switch", "Set", "MCP Trigger", "Execute Workflow Trigger", "Tool Workflow", "Chat Trigger"],
    "outputs": ["Google Calendar events created", "updated", "deleted", "searched", "Responses to chat or workflow requests with processed text or generated data"],
    "processed_at": "11/06/2025 22:07"
  }
  ,
  {
    "input_workflow_name": "8tusZTTtcyaiznEG_ðŸ¤–_AI_Powered_RAG_Chatbot_for_Your_Docs_+_Google_Drive_+_Gemini_+_Qdrant.json",
    "output_workflow_name": "AI Powered RAG Chatbot for Docs and Google Drive",
    "output_workflow_file_path": "analyzed_workflows/AI Powered RAG Chatbot for Docs and Google Drive/workflow.json",
    "output_readme_file_path": "analyzed_workflows/AI Powered RAG Chatbot for Docs and Google Drive/README.md",
    "summary": "Provides a Retrieval-Augmented Generation (RAG) chatbot that can search, analyze, and answer questions over documents from Google Drive using Gemini, Qdrant, and OpenAI embeddings.",
    "inputs": ["Manual trigger", "Google Drive folder selection"],
    "nodes_used": ["Google Drive", "Extract From File", "Information Extractor", "OpenAI Embeddings", "Qdrant Vector Store", "Gemini Chat Model", "Text Splitter", "Set", "Wait", "Code"],
    "outputs": ["Answers to user queries", "Document metadata and insights"],
    "processed_at": "11/06/2025 22:07"
  }
  ,
  {
    "input_workflow_name": "8v4dynjkHSLVGJSG_Crypto_News_&_Sentiment.json",
    "output_workflow_name": "Crypto News and Sentiment",
    "output_workflow_file_path": "analyzed_workflows/Crypto News and Sentiment/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Crypto News and Sentiment/README.md",
    "summary": "Aggregates crypto news from multiple sources and analyzes market sentiment for a given cryptocurrency or company, delivering concise summaries via Telegram.",
    "inputs": ["Telegram message (crypto or company name)"],
    "nodes_used": ["Telegram Trigger", "Set", "LangChain Agent", "RSS Feed Read", "Merge", "Code", "OpenAI Chat Model", "Telegram", "Sticky Note"],
    "outputs": ["Summarized news and sentiment analysis delivered to Telegram"],
    "processed_at": "11/06/2025 22:10"
  }
  ,
  {
    "input_workflow_name": "9Or3kzIEI2tskRyR_Google_Trend_Data_Extract,_Summarization_with_Bright_Data_&_Google_Gemini.json",
    "output_workflow_name": "Google Trend Data Extract and Summarization",
    "output_workflow_file_path": "analyzed_workflows/Google Trend Data Extract and Summarization/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google Trend Data Extract and Summarization/README.md",
    "summary": "Extracts, processes, and summarizes Google Trends data using Bright Data's Web Unlocker and Google Gemini AI, with results sent via webhook and Gmail.",
    "inputs": ["Manual trigger"],
    "nodes_used": ["Manual Trigger", "Set", "HTTP Request (Bright Data)", "Markdown to Textual Data Extractor", "Google Gemini Chat Model", "Structured Data Extractor", "Summarization Chain", "Webhook Notification", "Gmail", "Sticky Note"],
    "outputs": ["Summarized Google Trends data delivered via webhook and Gmail"],
    "processed_at": "11/06/2025 22:10"
  }
  ,
  {
    "input_workflow_name": "9_Coffee_Bot_(Matrix).json",
    "output_workflow_name": "Coffee Bot (Matrix)",
    "output_workflow_file_path": "analyzed_workflows/Coffee Bot (Matrix)/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Coffee Bot (Matrix)/README.md",
    "summary": "Automates weekly virtual coffee group assignments and announcements in a Matrix chat room.",
    "inputs": ["Weekly cron trigger (every Monday at 10:00)"] ,
    "nodes_used": ["Cron Trigger", "Matrix (Greetings)", "Matrix (Employees in coffee chat channel)", "Function (Divide into groups)", "Matrix (Announce groups)"],
    "outputs": ["Group assignments posted to the Matrix chat room"],
    "processed_at": "11/06/2025 22:12"
  }
  ,
  {
    "input_workflow_name": "9nBQ1BfwxLhuzTcK_google_drive_to_instagram,_tiktok_and_youtube.json",
    "output_workflow_name": "Google Drive to Instagram, TikTok and YouTube",
    "output_workflow_file_path": "analyzed_workflows/Google Drive to Instagram, TikTok and YouTube/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Google Drive to Instagram, TikTok and YouTube/README.md",
    "summary": "Automates the process of uploading videos from Google Drive to Instagram, TikTok, and YouTube, including AI-generated descriptions and error notifications.",
    "inputs": ["Google Drive file creation in a specific folder"],
    "nodes_used": ["Google Drive Trigger", "Google Drive", "OpenAI (Get Audio from Video)", "OpenAI (Generate Description)", "Read/Write Binary File", "HTTP Request", "Telegram", "If", "Sticky Note"],
    "outputs": ["Videos uploaded to Instagram, TikTok, and YouTube with AI-generated descriptions", "Error notifications sent via Telegram"],
    "processed_at": "11/06/2025 22:12"
  }
  ,
  {
    "input_workflow_name": "11_Plex_Automatic_Throttler.json",
    "output_workflow_name": "Plex Automatic Throttler",
    "output_workflow_file_path": "analyzed_workflows/Plex_Automatic_Throttler/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Plex_Automatic_Throttler/README.md",
    "summary": "Automatically manages and throttles Plex-related network activity based on playback events, ensuring optimal bandwidth usage.",
    "inputs": ["Webhook (Plex playback events)", "HTTP POST"],
    "nodes_used": ["Webhook", "Switch", "If", "HTTP Request", "Set", "NoOp"],
    "outputs": ["Adjusts qBittorrent speed limits via HTTP requests"],
    "processed_at": "12/06/2025 17:53"
  }
  ,
  {
    "input_workflow_name": "11_What_To_Eat.json",
    "output_workflow_name": "What To Eat",
    "output_workflow_file_path": "analyzed_workflows/What_To_Eat/workflow.json",
    "output_readme_file_path": "analyzed_workflows/What_To_Eat/README.md",
    "summary": "Sends daily personalized recipe suggestions via email based on user-defined dietary criteria and preferences.",
    "inputs": ["Cron (scheduled daily at 10:00 AM)", "User dietary preferences"],
    "nodes_used": ["Cron", "Set", "Function", "HTTP Request", "EmailSend", "Create Email Body in HTML"],
    "outputs": ["Email with a curated list of recipes"],
    "processed_at": "12/06/2025 17:53"
  }
  ,
  {
    "input_workflow_name": "11_workflow_11.json",
    "output_workflow_name": "Google Sheets to Dropbox XLS Exporter",
    "output_workflow_file_path": "analyzed_workflows/11_workflow_11/workflow.json",
    "output_readme_file_path": "analyzed_workflows/11_workflow_11/README.md",
    "summary": "Automatically exports data from a Google Sheet to an XLS file and uploads it to Dropbox every 15 minutes.",
    "inputs": ["Interval (every 15 minutes)", "Google Sheets data"],
    "nodes_used": ["Interval", "Google Sheets", "Spreadsheet File", "Dropbox"],
    "outputs": ["XLS file uploaded to Dropbox"],
    "processed_at": "12/06/2025 17:58"
  }
  ,
  {
    "input_workflow_name": "9r4T5kELOXAV8L1F_3D_Figurine_Orthographic_Views_with_Midjourney_and_GPT-4o-Image_API.json",
    "output_workflow_name": "3D Figurine Orthographic Views with Midjourney and GPT-4o-Image API",
    "output_workflow_file_path": "analyzed_workflows/3D_Figurine_Orthographic_Views_with_Midjourney_and_GPT-4o-Image_API/workflow.json",
    "output_readme_file_path": "analyzed_workflows/3D_Figurine_Orthographic_Views_with_Midjourney_and_GPT-4o-Image_API/README.md",
    "summary": "Generates orthographic views of 3D figurines using Midjourney and GPT-4o-Image API, providing AI-generated images and URLs for further use.",
    "inputs": ["Manual Trigger (when clicking 'Test workflow')"],
    "nodes_used": ["Manual Trigger", "HTTP Request", "If", "Wait", "Code"],
    "outputs": ["URLs to generated images of 3D figurines"],
    "processed_at": "12/06/2025 17:58"
  }
  ,
  {
    "input_workflow_name": "9w5vu5VmXxpdBLWi_Send_Daily_Birthday_Reminders_from_Google_Contacts_to_Slack.json",
    "output_workflow_name": "Send Daily Birthday Reminders from Google Contacts to Slack",
    "output_workflow_file_path": "analyzed_workflows/Send_Daily_Birthday_Reminders_from_Google_Contacts_to_Slack/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Send_Daily_Birthday_Reminders_from_Google_Contacts_to_Slack/README.md",
    "summary": "Automates the process of sending daily birthday reminders from Google Contacts to a designated Slack channel.",
    "inputs": ["Schedule Trigger (daily)", "Google Contacts data"],
    "nodes_used": ["Schedule Trigger", "Google Contacts", "Filter", "If", "Slack", "Sticky Note"],
    "outputs": ["Birthday reminder messages sent to Slack"],
    "processed_at": "12/06/2025 17:58"
  }
  ,
  {
    "input_workflow_name": "12_Create_Onfleet_tasks_from_Spreadsheets.json",
    "output_workflow_name": "Create Onfleet Tasks from Spreadsheets",
    "output_workflow_file_path": "analyzed_workflows/Create_Onfleet_tasks_from_Spreadsheets/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Create_Onfleet_tasks_from_Spreadsheets/README.md",
    "summary": "Automates the creation of Onfleet delivery tasks by reading addresses and recipient details from a spreadsheet file.",
    "inputs": ["Manual or scheduled execution", "Input spreadsheet file (e.g., .xlsx)"],
    "nodes_used": ["Read Binary File", "Spreadsheet File", "Onfleet"],
    "outputs": ["Delivery tasks created in Onfleet"],
    "processed_at": "12/06/2025 18:06"
  }
  ,
  {
    "input_workflow_name": "12_Find_a_New_Book.json",
    "output_workflow_name": "Find a New Book",
    "output_workflow_file_path": "analyzed_workflows/Find_a_New_Book/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Find_a_New_Book/README.md",
    "summary": "Suggests a random book from Open Library based on a chosen subject and sends the recommendation by email.",
    "inputs": ["Manual or scheduled execution", "Book subject"],
    "nodes_used": ["Manual Trigger", "Cron", "Set", "HTTP Request", "If", "Function", "EmailSend"],
    "outputs": ["Email with a book recommendation or notification if no books are found"],
    "processed_at": "12/06/2025 18:06"
  }
  ,
  {
    "input_workflow_name": "13_Creating_an_Onfleet_Task_for_a_new_Shopify_Fulfillment.json",
    "output_workflow_name": "Creating an Onfleet Task for a new Shopify Fulfillment",
    "output_workflow_file_path": "analyzed_workflows/Creating_an_Onfleet_Task_for_a_new_Shopify_Fulfillment/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Creating_an_Onfleet_Task_for_a_new_Shopify_Fulfillment/README.md",
    "summary": "Automatically creates a new Onfleet delivery task whenever a Shopify fulfillment is created.",
    "inputs": ["Shopify webhook for fulfillments/create"],
    "nodes_used": ["Shopify Trigger", "Onfleet"],
    "outputs": ["Delivery task created in Onfleet"],
    "processed_at": "12/06/2025 18:06"
  }
  ,
  {
    "input_workflow_name": "13_Mattermost_Webhook.json",
    "output_workflow_name": "Mattermost Webhook",
    "output_workflow_file_path": "analyzed_workflows/Mattermost_Webhook/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Mattermost_Webhook/README.md",
    "summary": "Receives a webhook, fetches a random cocktail recipe, and posts it to a Mattermost channel with an image and instructions.",
    "inputs": ["HTTP POST webhook (path: /webhook)", "Mattermost channel ID in payload"],
    "nodes_used": ["Webhook", "HTTP Request", "Mattermost"],
    "outputs": ["Cocktail recipe message sent to Mattermost channel"],
    "processed_at": "12/06/2025 18:11"
  }
  ,
  {
    "input_workflow_name": "13_Receive_updates_when_a_form_is_submitted_in_Mautic,_and_send_a_confirmation_SMS.json",
    "output_workflow_name": "Receive updates when a form is submitted in Mautic, and send a confirmation SMS",
    "output_workflow_file_path": "analyzed_workflows/Receive_updates_when_a_form_is_submitted_in_Mautic_and_send_a_confirmation_SMS/workflow.json",
    "output_readme_file_path": "analyzed_workflows/Receive_updates_when_a_form_is_submitted_in_Mautic_and_send_a_confirmation_SMS/README.md",
    "summary": "Sends a confirmation SMS via Twilio when a form is submitted in Mautic.",
    "inputs": ["Mautic webhook for form submission (mautic.form_on_submit)", "Form data (name, phone number)"],
    "nodes_used": ["Mautic Trigger", "Twilio"],
    "outputs": ["SMS confirmation sent to the phone number provided in the form"],
    "processed_at": "12/06/2025 18:11"
  }
  ,
  {
    "input_workflow_name": "13_workflow_13.json",
    "output_workflow_name": "XML to Dropbox Converter",
    "output_workflow_file_path": "analyzed_workflows/13_workflow_13/workflow.json",
    "output_readme_file_path": "analyzed_workflows/13_workflow_13/README.md",
    "summary": "Fetches XML data from a URL, converts it to JSON, modifies its content, converts it back to XML, and uploads the result to Dropbox.",
    "inputs": ["HTTP Request (fetches XML from an external URL)", "URL to XML data"],
    "nodes_used": ["HTTP Request", "XML (To JSON)", "Set", "XML (To XML)", "Dropbox"],
    "outputs": ["Modified XML file uploaded to Dropbox"],
    "processed_at": "12/06/2025 18:11"
  }
]
